// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZeroBuffer.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DuplexChannelTestsFeature : object, Xunit.IClassFixture<DuplexChannelTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "13-DuplexChannel.feature"
#line hidden
        
        public DuplexChannelTestsFeature(DuplexChannelTestsFeature.FixtureData fixtureData, ZeroBuffer_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Duplex Channel Tests", "    Tests for bidirectional communication using duplex channels", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.1 - Basic Request-Response")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.1 - Basic Request-Response")]
        public void Test13_1_BasicRequest_Response()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.1 - Basic Request-Response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 7
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-basic\' with metadat" +
                        "a size \'4096\' and payload size \'1048576\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
        testRunner.And("the \'server\' process starts echo handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-basic\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
        testRunner.And("the \'client\' process sends request with size \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
        testRunner.Then("response should match request with size \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
        testRunner.When("the \'client\' process sends request with size \'1024\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
        testRunner.Then("response should match request with size \'1024\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
        testRunner.When("the \'client\' process sends request with size \'102400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
        testRunner.Then("response should match request with size \'102400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.2 - Request-Response Order Preservation")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.2 - Request-Response Order Preservation")]
        public void Test13_2_Request_ResponseOrderPreservation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.2 - Request-Response Order Preservation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 25
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-sequence\' with defa" +
                        "ult config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
        testRunner.And("the \'server\' process starts echo handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-sequence\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
        testRunner.And("the \'client\' process sends \'10\' requests sequentially", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
        testRunner.Then("the \'client\' process receives \'10\' responses in order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
        testRunner.And("responses should match requests by content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
        testRunner.And("no responses should be lost or duplicated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.3 - Concurrent Client Operations")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.3 - Concurrent Client Operations")]
        public void Test13_3_ConcurrentClientOperations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.3 - Concurrent Client Operations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 36
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-concurrent\' with de" +
                        "fault config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
        testRunner.And("the \'server\' process starts echo handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-concurrent\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
        testRunner.And("the \'client\' process sends \'20\' requests from single thread", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
        testRunner.Then("the \'client\' process receives exactly \'20\' responses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
        testRunner.And("all \'20\' responses match their requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.4 - Server Processing Mode SingleThread")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.4 - Server Processing Mode SingleThread")]
        public void Test13_4_ServerProcessingModeSingleThread()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.4 - Server Processing Mode SingleThread", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 47
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-singlethread\' with " +
                        "processing mode \'SingleThread\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
        testRunner.And("the \'server\' process starts handler with \'100\' ms processing time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-singlethread\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
        testRunner.And("the \'client\' process sends \'3\' requests sequentially", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
        testRunner.And("the \'client\' process measures total response time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
        testRunner.Then("total time should be at least \'300\' ms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
        testRunner.And("responses should arrive in order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.5 - Server Death During Processing")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.5 - Server Death During Processing")]
        public void Test13_5_ServerDeathDuringProcessing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.5 - Server Death During Processing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 58
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-crash\' with default" +
                        " config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
        testRunner.And("the \'server\' process starts handler that crashes after \'100\' ms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-crash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
        testRunner.And("the \'client\' process sends request of \'1024\' bytes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
        testRunner.Then("the \'server\' process simulates crash during processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
        testRunner.When("the \'client\' process waits for response with timeout \'5\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
        testRunner.Then("the \'client\' process should detect server death", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
        testRunner.And("an appropriate exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.6 - Buffer Full on Response Channel")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.6 - Buffer Full on Response Channel")]
        public void Test13_6_BufferFullOnResponseChannel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.6 - Buffer Full on Response Channel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 72
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-full\' with metadata" +
                        " size \'1024\' and payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
        testRunner.And("the \'server\' process starts handler that doubles request size", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-full\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
        testRunner.And("the \'client\' process sends request with size \'4096\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
        testRunner.And("the \'client\' process does not read responses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
        testRunner.Then("the \'server\' process attempts to send response of \'8192\' bytes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
        testRunner.And("the \'server\' process should block on response write", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
        testRunner.When("the \'client\' process reads one response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
        testRunner.Then("the \'server\' process should unblock and complete write", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.7 - Zero-Copy Client Operations")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.7 - Zero-Copy Client Operations")]
        public void Test13_7_Zero_CopyClientOperations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.7 - Zero-Copy Client Operations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 87
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-zerocopy\' with defa" +
                        "ult config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
        testRunner.And("the \'server\' process starts echo handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-zerocopy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
        testRunner.And("the \'client\' process acquires zero-copy request buffer of size \'4096\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
        testRunner.And("the \'client\' process fills buffer with test pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
        testRunner.And("the \'client\' process commits request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
        testRunner.Then("response should contain same test pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
        testRunner.And("no memory allocations in send path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.8 - Immutable Server Handler Types")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.8 - Immutable Server Handler Types")]
        public void Test13_8_ImmutableServerHandlerTypes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.8 - Immutable Server Handler Types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 100
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-transform\' with def" +
                        "ault config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
        testRunner.And("the \'server\' process starts handler that implements XOR with key \'0xFF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-transform\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
        testRunner.And("the \'client\' process sends \'10240\' byte frame with test pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
        testRunner.Then("response should contain XOR transformed data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
        testRunner.And("the server handler receives immutable request frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
        testRunner.And("the server handler returns new response data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.9 - Client Death During Response Wait")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.9 - Client Death During Response Wait")]
        public void Test13_9_ClientDeathDuringResponseWait()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.9 - Client Death During Response Wait", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 111
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-client-crash\' with " +
                        "default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
        testRunner.And("the \'server\' process starts handler with \'2\' second processing delay", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-client-crash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
        testRunner.And("the \'client\' process sends request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
        testRunner.And("the \'client\' process simulates crash after \'1\' second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
        testRunner.Then("the \'server\' process completes processing after \'2\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
        testRunner.And("the \'server\' process attempts to send response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
        testRunner.And("the \'server\' process detects client death when writing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
        testRunner.And("the \'server\' process continues processing other requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.10 - Channel Cleanup on Dispose")]
        [Xunit.TraitAttribute("FeatureTitle", "Duplex Channel Tests")]
        [Xunit.TraitAttribute("Description", "Test 13.10 - Channel Cleanup on Dispose")]
        public void Test13_10_ChannelCleanupOnDispose()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.10 - Channel Cleanup on Dispose", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 124
        testRunner.Given("the \'server\' process creates immutable duplex channel \'duplex-cleanup\' with defau" +
                        "lt config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
        testRunner.And("the \'server\' process starts echo handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
        testRunner.When("the \'client\' process creates duplex channel client \'duplex-cleanup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
        testRunner.And("the \'client\' process sends \'5\' requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
        testRunner.And("the \'client\' process receives \'3\' responses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
        testRunner.Then("the \'server\' process disposes server while \'2\' responses pending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
        testRunner.When("the \'client\' process attempts to receive pending responses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
        testRunner.Then("the \'client\' process should receive exception on pending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
        testRunner.And("all shared memory should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
        testRunner.When("a new \'server\' process creates immutable duplex channel \'duplex-cleanup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
        testRunner.Then("the new server should reuse same channel name successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DuplexChannelTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DuplexChannelTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
