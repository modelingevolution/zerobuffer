// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZeroBuffer.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProtocolComplianceTestsFeature : object, Xunit.IClassFixture<ProtocolComplianceTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "12-ProtocolCompliance.feature"
#line hidden
        
        public ProtocolComplianceTestsFeature(ProtocolComplianceTestsFeature.FixtureData fixtureData, ZeroBuffer_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Protocol Compliance Tests", "    WARNING! Tests for low-level protocol verification and system conventions, th" +
                    "ese tests are in DEBUG mode. the reader and writer in RELEASE would not verify t" +
                    "his. ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
#line 5
        testRunner.Given("the test environment is initialized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
        testRunner.And("all processes are ready", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
     testRunner.And("we are in DEBUG mode for protocol compliance tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 12.1 - Protocol Compliance OIEB")]
        [Xunit.TraitAttribute("FeatureTitle", "Protocol Compliance Tests")]
        [Xunit.TraitAttribute("Description", "Test 12.1 - Protocol Compliance OIEB")]
        public void Test12_1_ProtocolComplianceOIEB()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 12.1 - Protocol Compliance OIEB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 10
        testRunner.Given("the \'reader\' process creates buffer \'test-oieb-compliance\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
        testRunner.When("the \'writer\' process connects to buffer \'test-oieb-compliance\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
        testRunner.And("performs multiple write operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "condition"});
                table11.AddRow(new string[] {
                            "payload_written_count",
                            "increments by 1"});
                table11.AddRow(new string[] {
                            "payload_free_bytes",
                            "decreases by frame size"});
                table11.AddRow(new string[] {
                            "payload_write_pos",
                            "advances correctly"});
                table11.AddRow(new string[] {
                            "all values",
                            "are 64-byte aligned"});
#line 15
        testRunner.Then("the \'writer\' process should verify after each write:", ((string)(null)), table11, "Then ");
#line hidden
#line 22
        testRunner.When("the \'reader\' process performs multiple read operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "condition"});
                table12.AddRow(new string[] {
                            "payload_read_count",
                            "increments by 1"});
                table12.AddRow(new string[] {
                            "payload_free_bytes",
                            "increases by frame size"});
                table12.AddRow(new string[] {
                            "payload_read_pos",
                            "advances correctly"});
#line 24
        testRunner.Then("the \'reader\' process should verify after each read:", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 12.2 - Memory Alignment Verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Protocol Compliance Tests")]
        [Xunit.TraitAttribute("Description", "Test 12.2 - Memory Alignment Verification")]
        public void Test12_2_MemoryAlignmentVerification()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 12.2 - Memory Alignment Verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 31
        testRunner.Given("the \'reader\' process creates buffer \'test-alignment\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
        testRunner.Then("the \'reader\' process should verify OIEB starts at 64-byte aligned address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
        testRunner.And("should verify metadata block starts at 64-byte aligned offset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
        testRunner.And("should verify payload block starts at 64-byte aligned offset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
        testRunner.When("the \'writer\' process connects to buffer \'test-alignment\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
        testRunner.And("writes various sized frames", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
        testRunner.Then("the \'writer\' process should verify all data access respects alignment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 12.3 - Lock File Semantics")]
        [Xunit.TraitAttribute("FeatureTitle", "Protocol Compliance Tests")]
        [Xunit.TraitAttribute("Description", "Test 12.3 - Lock File Semantics")]
        public void Test12_3_LockFileSemantics()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 12.3 - Lock File Semantics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 43
        testRunner.And("the \'reader\' process creates buffer \'test-lock-semantics\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
        testRunner.Then("verify lock file exists at correct location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
        testRunner.And("verify lock file is actually locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
        testRunner.When("kill reader process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
        testRunner.Then("new reader can acquire lock after detecting stale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
        testRunner.When("graceful shutdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
        testRunner.Then("verify lock file is removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 12.4 - Semaphore Naming Convention")]
        [Xunit.TraitAttribute("FeatureTitle", "Protocol Compliance Tests")]
        [Xunit.TraitAttribute("Description", "Test 12.4 - Semaphore Naming Convention")]
        public void Test12_4_SemaphoreNamingConvention()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 12.4 - Semaphore Naming Convention", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "buffer_name",
                            "description"});
                table13.AddRow(new string[] {
                            "550e8400-e29b-41d4-a716-446655440000",
                            "UUID format"});
                table13.AddRow(new string[] {
                            "test_buffer-123",
                            "alphanumeric with special chars"});
                table13.AddRow(new string[] {
                            "very_long_buffer_name_that_tests_maximum_length_limits",
                            "max length"});
#line 57
        testRunner.Given("create buffers with various names:", ((string)(null)), table13, "Given ");
#line hidden
#line 63
        testRunner.Then("verify semaphores created as \'sem-w-{name}\' and \'sem-r-{name}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
        testRunner.And("verify both Linux and Windows naming rules respected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProtocolComplianceTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProtocolComplianceTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
