// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZeroBuffer.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "benchmark")]
    public partial class PerformanceBenchmarkTestsFeature : object, Xunit.IClassFixture<PerformanceBenchmarkTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "benchmark"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "14-Benchmarks.feature"
#line hidden
        
        public PerformanceBenchmarkTestsFeature(PerformanceBenchmarkTestsFeature.FixtureData fixtureData, ZeroBuffer_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Performance Benchmark Tests", "    Performance benchmarks for latency, throughput, and overhead measurements", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
    #line hidden
#line 6
        testRunner.And("benchmark environment is prepared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 14.1 - Latency Benchmark")]
        [Xunit.TraitAttribute("FeatureTitle", "Performance Benchmark Tests")]
        [Xunit.TraitAttribute("Description", "Test 14.1 - Latency Benchmark")]
        public void Test14_1_LatencyBenchmark()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 14.1 - Latency Benchmark", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 9
        testRunner.Given("the \'reader\' process creates buffer \'bench-latency\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
        testRunner.When("the \'writer\' process connects to buffer \'bench-latency\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "size",
                            "iterations",
                            "expected"});
                table6.AddRow(new string[] {
                            "1KB",
                            "10000",
                            "sub-millisecond"});
                table6.AddRow(new string[] {
                            "64KB",
                            "10000",
                            "sub-millisecond"});
                table6.AddRow(new string[] {
                            "1MB",
                            "10000",
                            "low milliseconds"});
                table6.AddRow(new string[] {
                            "10MB",
                            "10000",
                            "low milliseconds"});
#line 13
        testRunner.Then("measure latency for frame sizes:", ((string)(null)), table6, "Then ");
#line hidden
#line 20
        testRunner.And("report Min, Max, Mean, P50, P90, P99, P99.9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 14.2 - Throughput Benchmark")]
        [Xunit.TraitAttribute("FeatureTitle", "Performance Benchmark Tests")]
        [Xunit.TraitAttribute("Description", "Test 14.2 - Throughput Benchmark")]
        public void Test14_2_ThroughputBenchmark()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 14.2 - Throughput Benchmark", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 23
        testRunner.Given("the \'reader\' process creates buffer \'bench-throughput\' with large config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
        testRunner.When("the \'writer\' process connects to buffer \'bench-throughput\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "size",
                            "metric"});
                table7.AddRow(new string[] {
                            "1KB",
                            "frames/sec, MB/sec"});
                table7.AddRow(new string[] {
                            "64KB",
                            "frames/sec, MB/sec"});
                table7.AddRow(new string[] {
                            "1MB",
                            "frames/sec, MB/sec"});
                table7.AddRow(new string[] {
                            "10MB",
                            "frames/sec, MB/sec"});
#line 27
        testRunner.Then("measure throughput for \'60\' seconds with frame sizes:", ((string)(null)), table7, "Then ");
#line hidden
#line 34
        testRunner.And("report CPU usage percentage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
        testRunner.And("expect to saturate memory bandwidth", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 14.3 - Wrap-Around Overhead Benchmark")]
        [Xunit.TraitAttribute("FeatureTitle", "Performance Benchmark Tests")]
        [Xunit.TraitAttribute("Description", "Test 14.3 - Wrap-Around Overhead Benchmark")]
        public void Test14_3_Wrap_AroundOverheadBenchmark()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 14.3 - Wrap-Around Overhead Benchmark", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 38
        testRunner.Given("buffer size is \'1.5x\' frame size to force wrap", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
        testRunner.When("measure performance with wrap-around", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
        testRunner.And("measure performance without wrap-around", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
        testRunner.Then("calculate overhead percentage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
        testRunner.And("expect less than \'5%\' performance impact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 14.4 - Memory Barrier Cost Benchmark")]
        [Xunit.TraitAttribute("FeatureTitle", "Performance Benchmark Tests")]
        [Xunit.TraitAttribute("Description", "Test 14.4 - Memory Barrier Cost Benchmark")]
        public void Test14_4_MemoryBarrierCostBenchmark()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 14.4 - Memory Barrier Cost Benchmark", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 47
        testRunner.Given("measure atomic fence operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
        testRunner.When("compare with and without memory barriers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
        testRunner.Then("verify data integrity maintained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
        testRunner.And("expect less than \'100\' ns per barrier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 14.5 - Semaphore Signaling Overhead")]
        [Xunit.TraitAttribute("FeatureTitle", "Performance Benchmark Tests")]
        [Xunit.TraitAttribute("Description", "Test 14.5 - Semaphore Signaling Overhead")]
        public void Test14_5_SemaphoreSignalingOverhead()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 14.5 - Semaphore Signaling Overhead", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 55
        testRunner.Given("measure sem_post/sem_wait operation cost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "rate",
                            "expected_impact"});
                table8.AddRow(new string[] {
                            "1Hz",
                            "negligible"});
                table8.AddRow(new string[] {
                            "100Hz",
                            "negligible"});
                table8.AddRow(new string[] {
                            "1kHz",
                            "negligible"});
                table8.AddRow(new string[] {
                            "10kHz",
                            "negligible"});
                table8.AddRow(new string[] {
                            "100kHz",
                            "measurable"});
#line 57
        testRunner.When("test at rates:", ((string)(null)), table8, "When ");
#line hidden
#line 65
        testRunner.Then("report CPU usage and latency impact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 14.6 - Buffer Utilization Under Load")]
        [Xunit.TraitAttribute("FeatureTitle", "Performance Benchmark Tests")]
        [Xunit.TraitAttribute("Description", "Test 14.6 - Buffer Utilization Under Load")]
        public void Test14_6_BufferUtilizationUnderLoad()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 14.6 - Buffer Utilization Under Load", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 68
        testRunner.Given("the \'reader\' process creates buffer \'bench-utilization\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
        testRunner.And("the \'writer\' process is configured to be faster than reader", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
        testRunner.When("monitor buffer utilization over time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
        testRunner.Then("verify degradation detection at \'80%\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
        testRunner.And("report time to degradation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
        testRunner.And("report recovery time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PerformanceBenchmarkTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PerformanceBenchmarkTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
