// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZeroBuffer.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EdgeCasesAndBoundaryConditionsFeature : object, Xunit.IClassFixture<EdgeCasesAndBoundaryConditionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "04-EdgeCases.feature"
#line hidden
        
        public EdgeCasesAndBoundaryConditionsFeature(EdgeCasesAndBoundaryConditionsFeature.FixtureData fixtureData, ZeroBuffer_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Edge Cases and Boundary Conditions", "    Tests for edge cases, minimum/maximum values, and boundary conditions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.1 - Alternating Frame Sizes")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.1 - Alternating Frame Sizes")]
        public void Test4_1_AlternatingFrameSizes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.1 - Alternating Frame Sizes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 7
        testRunner.Given("the \'reader\' process creates buffer \'test-alternating\' with metadata size \'0\' and" +
                        " payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
        testRunner.When("the \'writer\' process connects to buffer \'test-alternating\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.And("the \'writer\' process writes large frame using \'90%\' of buffer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
        testRunner.And("the \'writer\' process writes small frame of \'1\' byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
        testRunner.And("the \'writer\' process attempts to write large frame again", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
        testRunner.Then("proper wrap-around handling should occur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
        testRunner.And("no deadlocks should happen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.2 - Semaphore Signal Coalescing")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.2 - Semaphore Signal Coalescing")]
        public void Test4_2_SemaphoreSignalCoalescing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.2 - Semaphore Signal Coalescing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 18
        testRunner.Given("the \'reader\' process creates buffer \'test-coalesce\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
        testRunner.When("the \'writer\' process connects to buffer \'test-coalesce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
        testRunner.And("the \'writer\' process writes \'10\' frames rapidly without reader consuming", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.Then("the semaphore count should represent pending frames", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
        testRunner.When("the \'reader\' process wakes and processes all frames", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
        testRunner.Then("all frames should be read correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
        testRunner.And("the coalesced signals should be handled properly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.3 - Zero-Sized Metadata Block")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.3 - Zero-Sized Metadata Block")]
        public void Test4_3_Zero_SizedMetadataBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.3 - Zero-Sized Metadata Block", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 31
        testRunner.Given("the \'reader\' process creates buffer \'test-zero-metadata\' with metadata size \'0\' a" +
                        "nd payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
        testRunner.When("the \'writer\' process connects to buffer \'test-zero-metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
        testRunner.And("attempts to write metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
        testRunner.Then("the \'writer\' process metadata write should fail appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
        testRunner.When("the \'writer\' process writes frame without metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
        testRunner.Then("the \'writer\' process should verify frame write succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
        testRunner.And("the \'reader\' process should verify system works correctly without metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.4 - Minimum Buffer Sizes")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.4 - Minimum Buffer Sizes")]
        public void Test4_4_MinimumBufferSizes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.4 - Minimum Buffer Sizes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 44
        testRunner.Given("the \'reader\' process creates buffer \'test-minimum\' with minimum viable size \'17\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
        testRunner.When("the \'writer\' process connects to buffer \'test-minimum\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
        testRunner.And("writes single byte frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
        testRunner.Then("the \'writer\' process should verify write succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
        testRunner.When("the \'writer\' process attempts to write \'2\' byte frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
        testRunner.Then("the \'writer\' process should block waiting for space", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.5 - Reader Slower Than Writer")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.5 - Reader Slower Than Writer")]
        public void Test4_5_ReaderSlowerThanWriter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.5 - Reader Slower Than Writer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 57
        testRunner.Given("the \'reader\' process creates buffer \'test-reader-slower\' with metadata size \'0\' a" +
                        "nd payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
        testRunner.When("the \'writer\' process connects to buffer \'test-reader-slower\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
        testRunner.And("writes continuously at high speed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
        testRunner.When("the \'reader\' process reads with \'10\' ms delay per frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
        testRunner.And("the test runs for \'1000\' frames", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
        testRunner.Then("the \'reader\' process should receive all frames without loss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
        testRunner.Then("the \'writer\' process should block appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
        testRunner.And("flow control should work correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.6 - Exact Buffer Fit")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.6 - Exact Buffer Fit")]
        public void Test4_6_ExactBufferFit()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.6 - Exact Buffer Fit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 71
        testRunner.Given("the \'reader\' process creates buffer \'test-exact-fit\' with metadata size \'0\' and p" +
                        "ayload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
        testRunner.When("the \'writer\' process connects to buffer \'test-exact-fit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
        testRunner.And("the \'writer\' process writes frame with exact size \'10224\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
        testRunner.Then("buffer should be completely full", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
        testRunner.And("no more writes should be possible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
        testRunner.When("the \'reader\' process reads frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
        testRunner.Then("the frame should have size \'10224\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
        testRunner.When("the \'reader\' process signals space available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
        testRunner.Then("the \'writer\' process should be able to write again", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.7 - Minimum Frame Size")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.7 - Minimum Frame Size")]
        public void Test4_7_MinimumFrameSize()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.7 - Minimum Frame Size", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 86
        testRunner.Given("the \'reader\' process creates buffer \'test-min-frame\' with metadata size \'0\' and p" +
                        "ayload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
        testRunner.When("the \'writer\' process connects to buffer \'test-min-frame\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
        testRunner.And("the \'writer\' process attempts to write frame with size \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
        testRunner.Then("the \'writer\' process should fail with zero size error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
        testRunner.When("the \'writer\' process writes frame with size \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
        testRunner.Then("the \'reader\' process should read frame with size \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
        testRunner.And("frame overhead should be \'16\' bytes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.8 - Wrap-Around Behavior")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.8 - Wrap-Around Behavior")]
        public void Test4_8_Wrap_AroundBehavior()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.8 - Wrap-Around Behavior", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 99
        testRunner.Given("the \'reader\' process creates buffer \'test-wrap\' with metadata size \'0\' and payloa" +
                        "d size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
        testRunner.When("the \'writer\' process connects to buffer \'test-wrap\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
        testRunner.And("the \'writer\' process writes frame with size \'6144\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
        testRunner.Then("the \'reader\' process should read frame with size \'6144\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
        testRunner.When("the \'reader\' process signals space available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
        testRunner.And("the \'writer\' process writes frame with size \'7168\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
        testRunner.Then("the \'writer\' process should wait for space", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
        testRunner.When("the \'reader\' process signals space available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
        testRunner.Then("the \'writer\' process should complete write at buffer start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.9 - Rapid Write-Read Cycles")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.9 - Rapid Write-Read Cycles")]
        public void Test4_9_RapidWrite_ReadCycles()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.9 - Rapid Write-Read Cycles", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 115
        testRunner.Given("the \'reader\' process creates buffer \'test-rapid\' with metadata size \'0\' and paylo" +
                        "ad size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
        testRunner.When("the \'writer\' process connects to buffer \'test-rapid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
        testRunner.And("the \'writer\' process writes \'10000\' frames of size \'1024\' rapidly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
        testRunner.And("the \'reader\' process reads all frames and signals immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
        testRunner.Then("all sequence numbers should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
        testRunner.And("no frames should be lost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
        testRunner.And("no deadlocks should occur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.10 - Buffer Full With Multiple Writers Rejected")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.10 - Buffer Full With Multiple Writers Rejected")]
        public void Test4_10_BufferFullWithMultipleWritersRejected()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.10 - Buffer Full With Multiple Writers Rejected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 126
        testRunner.Given("the \'reader\' process creates buffer \'test-multi-writer-full\' with metadata size \'" +
                        "0\' and payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
        testRunner.When("the \'writer\' process connects to buffer \'test-multi-writer-full\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
        testRunner.And("the \'writer\' process fills buffer to \'80%\' capacity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
        testRunner.And("a second writer process attempts to connect to buffer \'test-multi-writer-full\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
        testRunner.Then("the second writer should fail with writer exists error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
        testRunner.When("the \'writer\' process continues filling buffer to \'100%\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
        testRunner.Then("the \'writer\' process should block waiting for space", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.11 - Concurrent Initialization Race")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.11 - Concurrent Initialization Race")]
        public void Test4_11_ConcurrentInitializationRace()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.11 - Concurrent Initialization Race", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 139
        testRunner.Given("two \'reader\' processes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
        testRunner.When("both simultaneously attempt to create buffer \'race-test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
        testRunner.Then("only one should succeed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
        testRunner.And("other should receive appropriate error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
        testRunner.And("no resource corruption should occur", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 4.12 - Writer Before Reader")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 4.12 - Writer Before Reader")]
        public void Test4_12_WriterBeforeReader()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 4.12 - Writer Before Reader", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 148
        testRunner.Given("the system is ready", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
        testRunner.When("a \'writer\' process attempts to connect to non-existent buffer \'no-reader\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
        testRunner.Then("the connection should fail with appropriate error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
        testRunner.And("error should indicate no shared memory found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EdgeCasesAndBoundaryConditionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EdgeCasesAndBoundaryConditionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
