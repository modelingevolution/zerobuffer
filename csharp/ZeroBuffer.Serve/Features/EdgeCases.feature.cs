// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ZeroBuffer.Serve.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EdgeCasesAndBoundaryConditionsFeature : object, Xunit.IClassFixture<EdgeCasesAndBoundaryConditionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EdgeCases.feature"
#line hidden
        
        public EdgeCasesAndBoundaryConditionsFeature(EdgeCasesAndBoundaryConditionsFeature.FixtureData fixtureData, ZeroBuffer_Serve_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Edge Cases and Boundary Conditions", "    Tests for edge cases, minimum/maximum values, and boundary conditions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
#line 5
        testRunner.Given("the test mode is configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 11.3 - Zero-Sized Metadata Block")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 11.3 - Zero-Sized Metadata Block")]
        public void Test11_3_Zero_SizedMetadataBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 11.3 - Zero-Sized Metadata Block", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 8
        testRunner.Given("the \'reader\' process creates buffer \'test-zero-metadata\' with metadata size \'0\' a" +
                        "nd payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.When("the \'writer\' process connects to buffer \'test-zero-metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
        testRunner.And("attempts to write metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
        testRunner.Then("the \'writer\' process metadata write should fail appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
        testRunner.When("the \'writer\' process writes frame without metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
        testRunner.Then("the \'writer\' process should verify frame write succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
        testRunner.And("the \'reader\' process should verify system works correctly without metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 11.4 - Minimum Buffer Sizes")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 11.4 - Minimum Buffer Sizes")]
        public void Test11_4_MinimumBufferSizes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 11.4 - Minimum Buffer Sizes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 21
        testRunner.Given("the \'reader\' process creates buffer \'test-minimum\' with minimum viable size \'17\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
        testRunner.When("the \'writer\' process connects to buffer \'test-minimum\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.And("writes single byte frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
        testRunner.Then("the \'writer\' process should verify write succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
        testRunner.When("the \'writer\' process attempts to write \'2\' byte frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
        testRunner.Then("the \'writer\' process should block waiting for space", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 5.5 - Wrap-Around With Wasted Space")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 5.5 - Wrap-Around With Wasted Space")]
        public void Test5_5_Wrap_AroundWithWastedSpace()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 5.5 - Wrap-Around With Wasted Space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 33
        testRunner.Given("the \'reader\' process creates buffer \'test-waste\' with metadata size \'0\' and paylo" +
                        "ad size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
        testRunner.When("the \'writer\' process connects to buffer \'test-waste\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
        testRunner.And("writes frame that leaves \'100\' bytes at end with \'incremental\' pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
        testRunner.And("attempts to write \'200\' byte frame with \'sequential\' pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
        testRunner.Then("the \'writer\' process should write wrap marker at current position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
        testRunner.And("should see payload_free_bytes reduced by wasted space", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
        testRunner.And("frame should be written at buffer start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
        testRunner.When("the \'reader\' process reads next frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
        testRunner.Then("the \'reader\' process should detect wrap marker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
        testRunner.And("should jump to buffer start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
        testRunner.And("should read \'200\' byte frame successfully with \'sequential\' pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 5.6 - Continuous Free Space Calculation")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 5.6 - Continuous Free Space Calculation")]
        public void Test5_6_ContinuousFreeSpaceCalculation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 5.6 - Continuous Free Space Calculation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 50
        testRunner.Given("the \'reader\' process creates buffer \'test-free-space\' with specific configuration" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "write_pos",
                            "read_pos",
                            "expected_result",
                            "scenario"});
                table4.AddRow(new string[] {
                            "5000",
                            "2000",
                            "calculated",
                            "write_pos > read_pos"});
                table4.AddRow(new string[] {
                            "2000",
                            "5000",
                            "calculated",
                            "write_pos < read_pos"});
                table4.AddRow(new string[] {
                            "5000",
                            "5000",
                            "calculated",
                            "write_pos == read_pos empty"});
                table4.AddRow(new string[] {
                            "0",
                            "0",
                            "calculated",
                            "both at start"});
                table4.AddRow(new string[] {
                            "5000",
                            "0",
                            "calculated",
                            "read_pos at start cannot wrap"});
#line 52
        testRunner.When("the system tests continuous_free_bytes calculation with:", ((string)(null)), table4, "When ");
#line hidden
#line 60
        testRunner.Then("the \'reader\' process calculations should match specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 5.7 - Maximum Frame Size")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 5.7 - Maximum Frame Size")]
        public void Test5_7_MaximumFrameSize()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 5.7 - Maximum Frame Size", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 63
        testRunner.Given("the \'reader\' process creates buffer \'test-max-frame\' with metadata size \'0\' and p" +
                        "ayload size \'104857600\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
        testRunner.When("the \'writer\' process connects to buffer \'test-max-frame\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
        testRunner.And("writes frame matching exactly payload size minus header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
        testRunner.Then("the \'writer\' process should verify frame was written successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
        testRunner.When("the \'writer\' process attempts to write frame exceeding payload size", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
        testRunner.Then("the \'writer\' process write should be rejected with appropriate error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 11.5 - Reader Slower Than Writer")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 11.5 - Reader Slower Than Writer")]
        public void Test11_5_ReaderSlowerThanWriter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 11.5 - Reader Slower Than Writer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 75
        testRunner.Given("the \'reader\' process creates buffer \'test-reader-slower\' with metadata size \'0\' a" +
                        "nd payload size \'10240\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
        testRunner.When("the \'writer\' process connects to buffer \'test-reader-slower\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
        testRunner.And("writes continuously at high speed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
        testRunner.When("the \'reader\' process reads with \'10\' ms delay per frame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
        testRunner.And("the test runs for \'1000\' frames", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
        testRunner.Then("the \'reader\' process should receive all frames without loss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
        testRunner.Then("the \'writer\' process should block appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
        testRunner.And("flow control should work correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.1 - Protocol Compliance OIEB")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 13.1 - Protocol Compliance OIEB")]
        public void Test13_1_ProtocolComplianceOIEB()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.1 - Protocol Compliance OIEB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 89
        testRunner.Given("the \'reader\' process creates buffer \'test-oieb-compliance\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
        testRunner.When("the \'writer\' process connects to buffer \'test-oieb-compliance\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
        testRunner.And("performs multiple write operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "condition"});
                table5.AddRow(new string[] {
                            "payload_written_count",
                            "increments by 1"});
                table5.AddRow(new string[] {
                            "payload_free_bytes",
                            "decreases by frame size"});
                table5.AddRow(new string[] {
                            "payload_write_pos",
                            "advances correctly"});
                table5.AddRow(new string[] {
                            "all values",
                            "are 64-byte aligned"});
#line 94
        testRunner.Then("the \'writer\' process should verify after each write:", ((string)(null)), table5, "Then ");
#line hidden
#line 101
        testRunner.When("the \'reader\' process performs multiple read operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "condition"});
                table6.AddRow(new string[] {
                            "payload_read_count",
                            "increments by 1"});
                table6.AddRow(new string[] {
                            "payload_free_bytes",
                            "increases by frame size"});
                table6.AddRow(new string[] {
                            "payload_read_pos",
                            "advances correctly"});
#line 103
        testRunner.Then("the \'reader\' process should verify after each read:", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test 13.2 - Memory Alignment Verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Edge Cases and Boundary Conditions")]
        [Xunit.TraitAttribute("Description", "Test 13.2 - Memory Alignment Verification")]
        public void Test13_2_MemoryAlignmentVerification()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test 13.2 - Memory Alignment Verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 110
        testRunner.Given("the \'reader\' process creates buffer \'test-alignment\' with default config", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
        testRunner.Then("the \'reader\' process should verify OIEB starts at 64-byte aligned address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
        testRunner.And("should verify metadata block starts at 64-byte aligned offset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
        testRunner.And("should verify payload block starts at 64-byte aligned offset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
        testRunner.When("the \'writer\' process connects to buffer \'test-alignment\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
        testRunner.And("writes various sized frames", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
        testRunner.Then("the \'writer\' process should verify all data access respects alignment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EdgeCasesAndBoundaryConditionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EdgeCasesAndBoundaryConditionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
