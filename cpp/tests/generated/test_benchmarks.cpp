// Generated from: 14-Benchmarks.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class BenchmarksTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(BenchmarksTest, Test_14_1_Latency_Benchmark) {
    // Scenario: Test 14.1 - Latency Benchmark

    // Background steps
    // And benchmark environment is prepared
    ASSERT_TRUE(ExecuteStep(StepType::And, "benchmark environment is prepared")) << "Failed: And benchmark environment is prepared";

    // Scenario steps
    // Given the 'reader' process creates buffer 'bench-latency' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'bench-latency' with default config")) << "Failed: Given the 'reader' process creates buffer 'bench-latency' with default config";
    // When the 'writer' process connects to buffer 'bench-latency'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'bench-latency'")) << "Failed: When the 'writer' process connects to buffer 'bench-latency'";
    // Then measure latency for frame sizes:
    ASSERT_TRUE(ExecuteStep(StepType::Then, "measure latency for frame sizes:")) << "Failed: Then measure latency for frame sizes:";
    // And report Min, Max, Mean, P50, P90, P99, P99.9
    ASSERT_TRUE(ExecuteStep(StepType::And, "report Min, Max, Mean, P50, P90, P99, P99.9")) << "Failed: And report Min, Max, Mean, P50, P90, P99, P99.9";
}

TEST_F(BenchmarksTest, Test_14_2_Throughput_Benchmark) {
    // Scenario: Test 14.2 - Throughput Benchmark

    // Background steps
    // And benchmark environment is prepared
    ASSERT_TRUE(ExecuteStep(StepType::And, "benchmark environment is prepared")) << "Failed: And benchmark environment is prepared";

    // Scenario steps
    // Given the 'reader' process creates buffer 'bench-throughput' with large config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'bench-throughput' with large config")) << "Failed: Given the 'reader' process creates buffer 'bench-throughput' with large config";
    // When the 'writer' process connects to buffer 'bench-throughput'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'bench-throughput'")) << "Failed: When the 'writer' process connects to buffer 'bench-throughput'";
    // Then measure throughput for '60' seconds with frame sizes:
    ASSERT_TRUE(ExecuteStep(StepType::Then, "measure throughput for '60' seconds with frame sizes:")) << "Failed: Then measure throughput for '60' seconds with frame sizes:";
    // And report CPU usage percentage
    ASSERT_TRUE(ExecuteStep(StepType::And, "report CPU usage percentage")) << "Failed: And report CPU usage percentage";
    // And expect to saturate memory bandwidth
    ASSERT_TRUE(ExecuteStep(StepType::And, "expect to saturate memory bandwidth")) << "Failed: And expect to saturate memory bandwidth";
}

TEST_F(BenchmarksTest, Test_14_3_Wrap_Around_Overhead_Benchmark) {
    // Scenario: Test 14.3 - Wrap-Around Overhead Benchmark

    // Background steps
    // And benchmark environment is prepared
    ASSERT_TRUE(ExecuteStep(StepType::And, "benchmark environment is prepared")) << "Failed: And benchmark environment is prepared";

    // Scenario steps
    // Given buffer size is '1.5x' frame size to force wrap
    ASSERT_TRUE(ExecuteStep(StepType::Given, "buffer size is '1.5x' frame size to force wrap")) << "Failed: Given buffer size is '1.5x' frame size to force wrap";
    // When measure performance with wrap-around
    ASSERT_TRUE(ExecuteStep(StepType::When, "measure performance with wrap-around")) << "Failed: When measure performance with wrap-around";
    // And measure performance without wrap-around
    ASSERT_TRUE(ExecuteStep(StepType::And, "measure performance without wrap-around")) << "Failed: And measure performance without wrap-around";
    // Then calculate overhead percentage
    ASSERT_TRUE(ExecuteStep(StepType::Then, "calculate overhead percentage")) << "Failed: Then calculate overhead percentage";
    // And expect less than '5%' performance impact
    ASSERT_TRUE(ExecuteStep(StepType::And, "expect less than '5%' performance impact")) << "Failed: And expect less than '5%' performance impact";
}

TEST_F(BenchmarksTest, Test_14_4_Memory_Barrier_Cost_Benchmark) {
    // Scenario: Test 14.4 - Memory Barrier Cost Benchmark

    // Background steps
    // And benchmark environment is prepared
    ASSERT_TRUE(ExecuteStep(StepType::And, "benchmark environment is prepared")) << "Failed: And benchmark environment is prepared";

    // Scenario steps
    // Given measure atomic fence operations
    ASSERT_TRUE(ExecuteStep(StepType::Given, "measure atomic fence operations")) << "Failed: Given measure atomic fence operations";
    // When compare with and without memory barriers
    ASSERT_TRUE(ExecuteStep(StepType::When, "compare with and without memory barriers")) << "Failed: When compare with and without memory barriers";
    // Then verify data integrity maintained
    ASSERT_TRUE(ExecuteStep(StepType::Then, "verify data integrity maintained")) << "Failed: Then verify data integrity maintained";
    // And expect less than '100' ns per barrier
    ASSERT_TRUE(ExecuteStep(StepType::And, "expect less than '100' ns per barrier")) << "Failed: And expect less than '100' ns per barrier";
}

TEST_F(BenchmarksTest, Test_14_5_Semaphore_Signaling_Overhead) {
    // Scenario: Test 14.5 - Semaphore Signaling Overhead

    // Background steps
    // And benchmark environment is prepared
    ASSERT_TRUE(ExecuteStep(StepType::And, "benchmark environment is prepared")) << "Failed: And benchmark environment is prepared";

    // Scenario steps
    // Given measure sem_post/sem_wait operation cost
    ASSERT_TRUE(ExecuteStep(StepType::Given, "measure sem_post/sem_wait operation cost")) << "Failed: Given measure sem_post/sem_wait operation cost";
    // When test at rates:
    ASSERT_TRUE(ExecuteStep(StepType::When, "test at rates:")) << "Failed: When test at rates:";
    // Then report CPU usage and latency impact
    ASSERT_TRUE(ExecuteStep(StepType::Then, "report CPU usage and latency impact")) << "Failed: Then report CPU usage and latency impact";
}

TEST_F(BenchmarksTest, Test_14_6_Buffer_Utilization_Under_Load) {
    // Scenario: Test 14.6 - Buffer Utilization Under Load

    // Background steps
    // And benchmark environment is prepared
    ASSERT_TRUE(ExecuteStep(StepType::And, "benchmark environment is prepared")) << "Failed: And benchmark environment is prepared";

    // Scenario steps
    // Given the 'reader' process creates buffer 'bench-utilization' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'bench-utilization' with default config")) << "Failed: Given the 'reader' process creates buffer 'bench-utilization' with default config";
    // And the 'writer' process is configured to be faster than reader
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process is configured to be faster than reader")) << "Failed: And the 'writer' process is configured to be faster than reader";
    // When monitor buffer utilization over time
    ASSERT_TRUE(ExecuteStep(StepType::When, "monitor buffer utilization over time")) << "Failed: When monitor buffer utilization over time";
    // Then verify degradation detection at '80%'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "verify degradation detection at '80%'")) << "Failed: Then verify degradation detection at '80%'";
    // And report time to degradation
    ASSERT_TRUE(ExecuteStep(StepType::And, "report time to degradation")) << "Failed: And report time to degradation";
    // And report recovery time
    ASSERT_TRUE(ExecuteStep(StepType::And, "report recovery time")) << "Failed: And report recovery time";
}

