// Generated from: 06-Synchronization.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class SynchronizationTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(SynchronizationTest, Test_6_1_Sequence_Number_Gap_Detection) {
    // Scenario: Test 6.1 - Sequence Number Gap Detection

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-sequence-gap' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-sequence-gap' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-sequence-gap' with default config";
    // When the 'writer' process connects to buffer 'test-sequence-gap'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-sequence-gap'")) << "Failed: When the 'writer' process connects to buffer 'test-sequence-gap'";
    // And the 'writer' process writes frame with sequence '1'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with sequence '1'")) << "Failed: And the 'writer' process writes frame with sequence '1'";
    // And the 'writer' process writes frame with sequence '2'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with sequence '2'")) << "Failed: And the 'writer' process writes frame with sequence '2'";
    // And the 'writer' process writes frame with sequence '3'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with sequence '3'")) << "Failed: And the 'writer' process writes frame with sequence '3'";
    // Then the 'reader' process should read frame with sequence '1'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with sequence '1'")) << "Failed: Then the 'reader' process should read frame with sequence '1'";
    // And the 'reader' process should read frame with sequence '2'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process should read frame with sequence '2'")) << "Failed: And the 'reader' process should read frame with sequence '2'";
    // When the test corrupts next frame sequence to '5'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the test corrupts next frame sequence to '5'")) << "Failed: When the test corrupts next frame sequence to '5'";
    // And the 'reader' process attempts to read frame
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process attempts to read frame")) << "Failed: And the 'reader' process attempts to read frame";
    // Then the read should fail with sequence error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the read should fail with sequence error")) << "Failed: Then the read should fail with sequence error";
    // And the error should show expected '4' got '5'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the error should show expected '4' got '5'")) << "Failed: And the error should show expected '4' got '5'";
}

TEST_F(SynchronizationTest, Test_6_2_Burst_Write_Performance) {
    // Scenario: Test 6.2 - Burst Write Performance

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-burst' with metadata size '0' and payload size '102400'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-burst' with metadata size '0' and payload size '102400'")) << "Failed: Given the 'reader' process creates buffer 'test-burst' with metadata size '0' and payload size '102400'";
    // When the 'writer' process connects to buffer 'test-burst'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-burst'")) << "Failed: When the 'writer' process connects to buffer 'test-burst'";
    // And the 'writer' process writes '50' frames of size '1024' as fast as possible
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes '50' frames of size '1024' as fast as possible")) << "Failed: And the 'writer' process writes '50' frames of size '1024' as fast as possible";
    // And the 'reader' process waits '1' second before reading
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process waits '1' second before reading")) << "Failed: And the 'reader' process waits '1' second before reading";
    // And the 'reader' process reads all '50' frames
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process reads all '50' frames")) << "Failed: And the 'reader' process reads all '50' frames";
    // Then all frames should be received correctly
    ASSERT_TRUE(ExecuteStep(StepType::Then, "all frames should be received correctly")) << "Failed: Then all frames should be received correctly";
    // And data integrity should be maintained
    ASSERT_TRUE(ExecuteStep(StepType::And, "data integrity should be maintained")) << "Failed: And data integrity should be maintained";
}

TEST_F(SynchronizationTest, Test_6_3_Slow_Reader_Flow_Control) {
    // Scenario: Test 6.3 - Slow Reader Flow Control

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-slow-reader' with metadata size '0' and payload size '51200'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-slow-reader' with metadata size '0' and payload size '51200'")) << "Failed: Given the 'reader' process creates buffer 'test-slow-reader' with metadata size '0' and payload size '51200'";
    // When the 'writer' process connects to buffer 'test-slow-reader'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-slow-reader'")) << "Failed: When the 'writer' process connects to buffer 'test-slow-reader'";
    // And the 'writer' process writes frames continuously
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frames continuously")) << "Failed: And the 'writer' process writes frames continuously";
    // And the 'reader' process reads one frame every '100' ms
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process reads one frame every '100' ms")) << "Failed: And the 'reader' process reads one frame every '100' ms";
    // Then the 'writer' process should block when buffer full
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should block when buffer full")) << "Failed: Then the 'writer' process should block when buffer full";
    // And no frames should be lost
    ASSERT_TRUE(ExecuteStep(StepType::And, "no frames should be lost")) << "Failed: And no frames should be lost";
    // And flow control should work correctly
    ASSERT_TRUE(ExecuteStep(StepType::And, "flow control should work correctly")) << "Failed: And flow control should work correctly";
}

TEST_F(SynchronizationTest, Test_6_4_Semaphore_Signal_Ordering) {
    // Scenario: Test 6.4 - Semaphore Signal Ordering

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-semaphore' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-semaphore' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-semaphore' with default config";
    // When the 'writer' process connects to buffer 'test-semaphore'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-semaphore'")) << "Failed: When the 'writer' process connects to buffer 'test-semaphore'";
    // And the 'writer' process writes frame and signal
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame and signal")) << "Failed: And the 'writer' process writes frame and signal";
    // And the 'writer' process immediately writes another frame before reader wakes
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process immediately writes another frame before reader wakes")) << "Failed: And the 'writer' process immediately writes another frame before reader wakes";
    // Then the 'reader' process should process both frames correctly
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should process both frames correctly")) << "Failed: Then the 'reader' process should process both frames correctly";
    // And the semaphore count should reflect pending frames
    ASSERT_TRUE(ExecuteStep(StepType::And, "the semaphore count should reflect pending frames")) << "Failed: And the semaphore count should reflect pending frames";
}

