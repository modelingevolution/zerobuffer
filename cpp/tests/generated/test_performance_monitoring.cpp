// Generated from: 09-PerformanceMonitoring.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class PerformanceMonitoringTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(PerformanceMonitoringTest, Test_9_1_CPU_Usage_Monitoring) {
    // Scenario: Test 9.1 - CPU Usage Monitoring

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-cpu-usage' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-cpu-usage' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-cpu-usage' with default config";
    // When the 'writer' process connects to buffer 'test-cpu-usage'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-cpu-usage'")) << "Failed: When the 'writer' process connects to buffer 'test-cpu-usage'";
    // Then monitor CPU usage during idle (blocked on semaphore)
    ASSERT_TRUE(ExecuteStep(StepType::Then, "monitor CPU usage during idle (blocked on semaphore)")) << "Failed: Then monitor CPU usage during idle (blocked on semaphore)";
    // And verify near-zero CPU when waiting
    ASSERT_TRUE(ExecuteStep(StepType::And, "verify near-zero CPU when waiting")) << "Failed: And verify near-zero CPU when waiting";
    // When transfer data actively
    ASSERT_TRUE(ExecuteStep(StepType::When, "transfer data actively")) << "Failed: When transfer data actively";
    // Then monitor CPU during active transfer
    ASSERT_TRUE(ExecuteStep(StepType::Then, "monitor CPU during active transfer")) << "Failed: Then monitor CPU during active transfer";
    // And verify efficient data copying
    ASSERT_TRUE(ExecuteStep(StepType::And, "verify efficient data copying")) << "Failed: And verify efficient data copying";
}

