// Generated from: 12-ProtocolCompliance.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class ProtocolComplianceTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(ProtocolComplianceTest, Test_12_1_Protocol_Compliance_OIEB) {
    // Scenario: Test 12.1 - Protocol Compliance OIEB

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";
    // And we are in DEBUG mode for protocol compliance tests
    ASSERT_TRUE(ExecuteStep(StepType::And, "we are in DEBUG mode for protocol compliance tests")) << "Failed: And we are in DEBUG mode for protocol compliance tests";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-oieb-compliance' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-oieb-compliance' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-oieb-compliance' with default config";
    // When the 'writer' process connects to buffer 'test-oieb-compliance'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-oieb-compliance'")) << "Failed: When the 'writer' process connects to buffer 'test-oieb-compliance'";
    // And performs multiple write operations
    ASSERT_TRUE(ExecuteStep(StepType::And, "performs multiple write operations")) << "Failed: And performs multiple write operations";
    // Then the 'writer' process should verify after each write:
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should verify after each write:")) << "Failed: Then the 'writer' process should verify after each write:";
    // When the 'reader' process performs multiple read operations
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process performs multiple read operations")) << "Failed: When the 'reader' process performs multiple read operations";
    // Then the 'reader' process should verify after each read:
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should verify after each read:")) << "Failed: Then the 'reader' process should verify after each read:";
}

TEST_F(ProtocolComplianceTest, Test_12_2_Memory_Alignment_Verification) {
    // Scenario: Test 12.2 - Memory Alignment Verification

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";
    // And we are in DEBUG mode for protocol compliance tests
    ASSERT_TRUE(ExecuteStep(StepType::And, "we are in DEBUG mode for protocol compliance tests")) << "Failed: And we are in DEBUG mode for protocol compliance tests";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-alignment' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-alignment' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-alignment' with default config";
    // Then the 'reader' process should verify OIEB starts at 64-byte aligned address
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should verify OIEB starts at 64-byte aligned address")) << "Failed: Then the 'reader' process should verify OIEB starts at 64-byte aligned address";
    // And should verify metadata block starts at 64-byte aligned offset
    ASSERT_TRUE(ExecuteStep(StepType::And, "should verify metadata block starts at 64-byte aligned offset")) << "Failed: And should verify metadata block starts at 64-byte aligned offset";
    // And should verify payload block starts at 64-byte aligned offset
    ASSERT_TRUE(ExecuteStep(StepType::And, "should verify payload block starts at 64-byte aligned offset")) << "Failed: And should verify payload block starts at 64-byte aligned offset";
    // When the 'writer' process connects to buffer 'test-alignment'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-alignment'")) << "Failed: When the 'writer' process connects to buffer 'test-alignment'";
    // And writes various sized frames
    ASSERT_TRUE(ExecuteStep(StepType::And, "writes various sized frames")) << "Failed: And writes various sized frames";
    // Then the 'writer' process should verify all data access respects alignment
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should verify all data access respects alignment")) << "Failed: Then the 'writer' process should verify all data access respects alignment";
}

TEST_F(ProtocolComplianceTest, Test_12_3_Lock_File_Semantics) {
    // Scenario: Test 12.3 - Lock File Semantics

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";
    // And we are in DEBUG mode for protocol compliance tests
    ASSERT_TRUE(ExecuteStep(StepType::And, "we are in DEBUG mode for protocol compliance tests")) << "Failed: And we are in DEBUG mode for protocol compliance tests";

    // Scenario steps
    // And the 'reader' process creates buffer 'test-lock-semantics' with default config
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process creates buffer 'test-lock-semantics' with default config")) << "Failed: And the 'reader' process creates buffer 'test-lock-semantics' with default config";
    // Then verify lock file exists at correct location
    ASSERT_TRUE(ExecuteStep(StepType::Then, "verify lock file exists at correct location")) << "Failed: Then verify lock file exists at correct location";
    // And verify lock file is actually locked
    ASSERT_TRUE(ExecuteStep(StepType::And, "verify lock file is actually locked")) << "Failed: And verify lock file is actually locked";
    // When kill reader process
    ASSERT_TRUE(ExecuteStep(StepType::When, "kill reader process")) << "Failed: When kill reader process";
    // Then new reader can acquire lock after detecting stale
    ASSERT_TRUE(ExecuteStep(StepType::Then, "new reader can acquire lock after detecting stale")) << "Failed: Then new reader can acquire lock after detecting stale";
    // When graceful shutdown
    ASSERT_TRUE(ExecuteStep(StepType::When, "graceful shutdown")) << "Failed: When graceful shutdown";
    // Then verify lock file is removed
    ASSERT_TRUE(ExecuteStep(StepType::Then, "verify lock file is removed")) << "Failed: Then verify lock file is removed";
}

TEST_F(ProtocolComplianceTest, Test_12_4_Semaphore_Naming_Convention) {
    // Scenario: Test 12.4 - Semaphore Naming Convention

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";
    // And we are in DEBUG mode for protocol compliance tests
    ASSERT_TRUE(ExecuteStep(StepType::And, "we are in DEBUG mode for protocol compliance tests")) << "Failed: And we are in DEBUG mode for protocol compliance tests";

    // Scenario steps
    // Given create buffers with various names:
    ASSERT_TRUE(ExecuteStep(StepType::Given, "create buffers with various names:")) << "Failed: Given create buffers with various names:";
    // Then verify semaphores created as 'sem-w-{name}' and 'sem-r-{name}'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "verify semaphores created as 'sem-w-{name}' and 'sem-r-{name}'")) << "Failed: Then verify semaphores created as 'sem-w-{name}' and 'sem-r-{name}'";
    // And verify both Linux and Windows naming rules respected
    ASSERT_TRUE(ExecuteStep(StepType::And, "verify both Linux and Windows naming rules respected")) << "Failed: And verify both Linux and Windows naming rules respected";
}

