// Generated from: 04-EdgeCases.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class EdgeCasesTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(EdgeCasesTest, Test_4_1_Alternating_Frame_Sizes) {
    // Scenario: Test 4.1 - Alternating Frame Sizes

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-alternating' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-alternating' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-alternating' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-alternating'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-alternating'")) << "Failed: When the 'writer' process connects to buffer 'test-alternating'";
    // And the 'writer' process writes large frame using '90%' of buffer
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes large frame using '90%' of buffer")) << "Failed: And the 'writer' process writes large frame using '90%' of buffer";
    // And the 'writer' process writes small frame of '1' byte
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes small frame of '1' byte")) << "Failed: And the 'writer' process writes small frame of '1' byte";
    // And the 'writer' process attempts to write large frame again
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process attempts to write large frame again")) << "Failed: And the 'writer' process attempts to write large frame again";
    // Then the 'writer' process proper wrap-around handling should occur
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process proper wrap-around handling should occur")) << "Failed: Then the 'writer' process proper wrap-around handling should occur";
    // And the 'writer' process no deadlocks should happen
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process no deadlocks should happen")) << "Failed: And the 'writer' process no deadlocks should happen";
}

TEST_F(EdgeCasesTest, Test_4_2_Semaphore_Signal_Coalescing) {
    // Scenario: Test 4.2 - Semaphore Signal Coalescing

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-coalesce' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-coalesce' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-coalesce' with default config";
    // When the 'writer' process connects to buffer 'test-coalesce'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-coalesce'")) << "Failed: When the 'writer' process connects to buffer 'test-coalesce'";
    // And the 'writer' process writes '10' frames rapidly without reader consuming
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes '10' frames rapidly without reader consuming")) << "Failed: And the 'writer' process writes '10' frames rapidly without reader consuming";
    // Then the 'writer' process the semaphore count should represent pending frames
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process the semaphore count should represent pending frames")) << "Failed: Then the 'writer' process the semaphore count should represent pending frames";
    // When the 'reader' process wakes and processes all frames
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process wakes and processes all frames")) << "Failed: When the 'reader' process wakes and processes all frames";
    // Then the 'reader' process all frames should be read correctly
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process all frames should be read correctly")) << "Failed: Then the 'reader' process all frames should be read correctly";
    // And the 'reader' process the coalesced signals should be handled properly
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process the coalesced signals should be handled properly")) << "Failed: And the 'reader' process the coalesced signals should be handled properly";
}

TEST_F(EdgeCasesTest, Test_4_3_Zero_Sized_Metadata_Block) {
    // Scenario: Test 4.3 - Zero-Sized Metadata Block

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-zero-metadata' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-zero-metadata' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-zero-metadata' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-zero-metadata'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-zero-metadata'")) << "Failed: When the 'writer' process connects to buffer 'test-zero-metadata'";
    // And the 'writer' process attempts to write metadata
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process attempts to write metadata")) << "Failed: And the 'writer' process attempts to write metadata";
    // Then the 'writer' process metadata write should fail appropriately
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process metadata write should fail appropriately")) << "Failed: Then the 'writer' process metadata write should fail appropriately";
    // When the 'writer' process writes frame without metadata
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process writes frame without metadata")) << "Failed: When the 'writer' process writes frame without metadata";
    // Then the 'writer' process should verify frame write succeeded
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should verify frame write succeeded")) << "Failed: Then the 'writer' process should verify frame write succeeded";
    // And the 'reader' process should verify system works correctly without metadata
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process should verify system works correctly without metadata")) << "Failed: And the 'reader' process should verify system works correctly without metadata";
}

TEST_F(EdgeCasesTest, Test_4_4_Minimum_Buffer_Sizes) {
    // Scenario: Test 4.4 - Minimum Buffer Sizes

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-minimum' with minimum viable size '64'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-minimum' with minimum viable size '64'")) << "Failed: Given the 'reader' process creates buffer 'test-minimum' with minimum viable size '64'";
    // When the 'writer' process connects to buffer 'test-minimum'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-minimum'")) << "Failed: When the 'writer' process connects to buffer 'test-minimum'";
    // And the 'writer' process writes single byte frame
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes single byte frame")) << "Failed: And the 'writer' process writes single byte frame";
    // Then the 'writer' process should verify write succeeded
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should verify write succeeded")) << "Failed: Then the 'writer' process should verify write succeeded";
    // When the 'writer' process attempts to write '49' byte frame
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process attempts to write '49' byte frame")) << "Failed: When the 'writer' process attempts to write '49' byte frame";
    // Then the 'writer' process should receive FrameTooLargeException
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should receive FrameTooLargeException")) << "Failed: Then the 'writer' process should receive FrameTooLargeException";
}

TEST_F(EdgeCasesTest, Test_4_5_Reader_Slower_Than_Writer) {
    // Scenario: Test 4.5 - Reader Slower Than Writer

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-reader-slower' with metadata size '0' and payload size '1024'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-reader-slower' with metadata size '0' and payload size '1024'")) << "Failed: Given the 'reader' process creates buffer 'test-reader-slower' with metadata size '0' and payload size '1024'";
    // When the 'writer' process connects to buffer 'test-reader-slower'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-reader-slower'")) << "Failed: When the 'writer' process connects to buffer 'test-reader-slower'";
    // And the 'writer' process writes continuously at high speed
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes continuously at high speed")) << "Failed: And the 'writer' process writes continuously at high speed";
    // When the 'reader' process reads with '50' ms delay per frame
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process reads with '50' ms delay per frame")) << "Failed: When the 'reader' process reads with '50' ms delay per frame";
    // And the 'reader' process the test runs for '100' frames
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process the test runs for '100' frames")) << "Failed: And the 'reader' process the test runs for '100' frames";
    // Then the 'reader' process should receive all frames without loss
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should receive all frames without loss")) << "Failed: Then the 'reader' process should receive all frames without loss";
    // Then the 'writer' process should block appropriately
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should block appropriately")) << "Failed: Then the 'writer' process should block appropriately";
    // And the 'writer' process flow control should work correctly
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process flow control should work correctly")) << "Failed: And the 'writer' process flow control should work correctly";
}

TEST_F(EdgeCasesTest, Test_4_6_Exact_Buffer_Fit) {
    // Scenario: Test 4.6 - Exact Buffer Fit

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-exact-fit' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-exact-fit' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-exact-fit' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-exact-fit'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-exact-fit'")) << "Failed: When the 'writer' process connects to buffer 'test-exact-fit'";
    // And the 'writer' process writes frame with exact size '10224'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with exact size '10224'")) << "Failed: And the 'writer' process writes frame with exact size '10224'";
    // Then buffer should be completely full
    ASSERT_TRUE(ExecuteStep(StepType::Then, "buffer should be completely full")) << "Failed: Then buffer should be completely full";
    // And no more writes should be possible
    ASSERT_TRUE(ExecuteStep(StepType::And, "no more writes should be possible")) << "Failed: And no more writes should be possible";
    // When the 'reader' process reads frame
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process reads frame")) << "Failed: When the 'reader' process reads frame";
    // Then the frame should have size '10224'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the frame should have size '10224'")) << "Failed: Then the frame should have size '10224'";
    // When the 'reader' process signals space available
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process signals space available")) << "Failed: When the 'reader' process signals space available";
    // Then the 'writer' process should be able to write again
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should be able to write again")) << "Failed: Then the 'writer' process should be able to write again";
}

TEST_F(EdgeCasesTest, Test_4_7_Minimum_Frame_Size) {
    // Scenario: Test 4.7 - Minimum Frame Size

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-min-frame' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-min-frame' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-min-frame' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-min-frame'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-min-frame'")) << "Failed: When the 'writer' process connects to buffer 'test-min-frame'";
    // And the 'writer' process attempts to write frame with size '0'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process attempts to write frame with size '0'")) << "Failed: And the 'writer' process attempts to write frame with size '0'";
    // Then the 'writer' process should fail with zero size error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should fail with zero size error")) << "Failed: Then the 'writer' process should fail with zero size error";
    // When the 'writer' process writes frame with size '1'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process writes frame with size '1'")) << "Failed: When the 'writer' process writes frame with size '1'";
    // Then the 'reader' process should read frame with size '1'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with size '1'")) << "Failed: Then the 'reader' process should read frame with size '1'";
    // And frame overhead should be '16' bytes
    ASSERT_TRUE(ExecuteStep(StepType::And, "frame overhead should be '16' bytes")) << "Failed: And frame overhead should be '16' bytes";
}

TEST_F(EdgeCasesTest, Test_4_8_Wrap_Around_Behavior) {
    // Scenario: Test 4.8 - Wrap-Around Behavior

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-wrap' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-wrap' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-wrap' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-wrap'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-wrap'")) << "Failed: When the 'writer' process connects to buffer 'test-wrap'";
    // And the 'writer' process writes frame with size '6144'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with size '6144'")) << "Failed: And the 'writer' process writes frame with size '6144'";
    // Then the 'reader' process should read frame with size '6144'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with size '6144'")) << "Failed: Then the 'reader' process should read frame with size '6144'";
    // When the 'reader' process signals space available
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process signals space available")) << "Failed: When the 'reader' process signals space available";
    // And the 'writer' process writes frame with size '7168'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with size '7168'")) << "Failed: And the 'writer' process writes frame with size '7168'";
    // Then the 'writer' process should wait for space
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should wait for space")) << "Failed: Then the 'writer' process should wait for space";
    // When the 'reader' process signals space available
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process signals space available")) << "Failed: When the 'reader' process signals space available";
    // Then the 'writer' process should complete write at buffer start
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should complete write at buffer start")) << "Failed: Then the 'writer' process should complete write at buffer start";
}

TEST_F(EdgeCasesTest, Test_4_9_Rapid_Write_Read_Cycles) {
    // Scenario: Test 4.9 - Rapid Write-Read Cycles

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-rapid' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-rapid' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-rapid' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-rapid'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-rapid'")) << "Failed: When the 'writer' process connects to buffer 'test-rapid'";
    // And the 'writer' process writes '10000' frames of size '1024' rapidly
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes '10000' frames of size '1024' rapidly")) << "Failed: And the 'writer' process writes '10000' frames of size '1024' rapidly";
    // And the 'reader' process reads all frames and signals immediately
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process reads all frames and signals immediately")) << "Failed: And the 'reader' process reads all frames and signals immediately";
    // Then all sequence numbers should be correct
    ASSERT_TRUE(ExecuteStep(StepType::Then, "all sequence numbers should be correct")) << "Failed: Then all sequence numbers should be correct";
    // And no frames should be lost
    ASSERT_TRUE(ExecuteStep(StepType::And, "no frames should be lost")) << "Failed: And no frames should be lost";
    // And no deadlocks should occur
    ASSERT_TRUE(ExecuteStep(StepType::And, "no deadlocks should occur")) << "Failed: And no deadlocks should occur";
}

TEST_F(EdgeCasesTest, Test_4_10_Buffer_Full_With_Multiple_Writers_Rejected) {
    // Scenario: Test 4.10 - Buffer Full With Multiple Writers Rejected

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-multi-writer-full' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-multi-writer-full' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-multi-writer-full' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-multi-writer-full'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-multi-writer-full'")) << "Failed: When the 'writer' process connects to buffer 'test-multi-writer-full'";
    // And the 'writer' process fills buffer to '80%' capacity
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process fills buffer to '80%' capacity")) << "Failed: And the 'writer' process fills buffer to '80%' capacity";
    // And the 'writer' process a second writer process attempts to connect to buffer 'test-multi-writer-full'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process a second writer process attempts to connect to buffer 'test-multi-writer-full'")) << "Failed: And the 'writer' process a second writer process attempts to connect to buffer 'test-multi-writer-full'";
    // Then the 'writer' process the second writer should fail with writer exists error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process the second writer should fail with writer exists error")) << "Failed: Then the 'writer' process the second writer should fail with writer exists error";
    // When the 'writer' process continues filling buffer to '100%'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process continues filling buffer to '100%'")) << "Failed: When the 'writer' process continues filling buffer to '100%'";
    // Then the 'writer' process should block waiting for space
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should block waiting for space")) << "Failed: Then the 'writer' process should block waiting for space";
}

TEST_F(EdgeCasesTest, Test_4_11_Concurrent_Initialization_Race) {
    // Scenario: Test 4.11 - Concurrent Initialization Race

    // Background steps

    // Scenario steps
    // Given two 'reader' processes
    ASSERT_TRUE(ExecuteStep(StepType::Given, "two 'reader' processes")) << "Failed: Given two 'reader' processes";
    // When both simultaneously attempt to create buffer 'race-test'
    ASSERT_TRUE(ExecuteStep(StepType::When, "both simultaneously attempt to create buffer 'race-test'")) << "Failed: When both simultaneously attempt to create buffer 'race-test'";
    // Then only one should succeed
    ASSERT_TRUE(ExecuteStep(StepType::Then, "only one should succeed")) << "Failed: Then only one should succeed";
    // And other should receive appropriate error
    ASSERT_TRUE(ExecuteStep(StepType::And, "other should receive appropriate error")) << "Failed: And other should receive appropriate error";
    // And no resource corruption should occur
    ASSERT_TRUE(ExecuteStep(StepType::And, "no resource corruption should occur")) << "Failed: And no resource corruption should occur";
}

TEST_F(EdgeCasesTest, Test_4_12_Writer_Before_Reader) {
    // Scenario: Test 4.12 - Writer Before Reader

    // Background steps

    // Scenario steps
    // Given the system is ready
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the system is ready")) << "Failed: Given the system is ready";
    // When a 'writer' process attempts to connect to non-existent buffer 'no-reader'
    ASSERT_TRUE(ExecuteStep(StepType::When, "a 'writer' process attempts to connect to non-existent buffer 'no-reader'")) << "Failed: When a 'writer' process attempts to connect to non-existent buffer 'no-reader'";
    // Then the connection should fail with appropriate error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the connection should fail with appropriate error")) << "Failed: Then the connection should fail with appropriate error";
    // And error should indicate no shared memory found
    ASSERT_TRUE(ExecuteStep(StepType::And, "error should indicate no shared memory found")) << "Failed: And error should indicate no shared memory found";
}

