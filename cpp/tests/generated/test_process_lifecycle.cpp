// Generated from: 02-ProcessLifecycle.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class ProcessLifecycleTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(ProcessLifecycleTest, Test_2_1_Writer_Crash_Detection) {
    // Scenario: Test 2.1 - Writer Crash Detection

    // Background steps
    // Given we run in harmony
    ASSERT_TRUE(ExecuteStep(StepType::Given, "we run in harmony")) << "Failed: Given we run in harmony";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-writer-crash' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-writer-crash' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-writer-crash' with metadata size '1024' and payload size '10240'";
    // And the 'writer' process connects to buffer 'test-writer-crash'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process connects to buffer 'test-writer-crash'")) << "Failed: And the 'writer' process connects to buffer 'test-writer-crash'";
    // And the 'writer' process writes frame with data 'alive'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with data 'alive'")) << "Failed: And the 'writer' process writes frame with data 'alive'";
    // Then the 'reader' process should read frame with data 'alive'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with data 'alive'")) << "Failed: Then the 'reader' process should read frame with data 'alive'";
    // When the 'writer' process is killed
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process is killed")) << "Failed: When the 'writer' process is killed";
    // Then wait for '2' seconds
    ASSERT_TRUE(ExecuteStep(StepType::Then, "wait for '2' seconds")) << "Failed: Then wait for '2' seconds";
    // And the 'reader' process should timeout or detect writer death on next read
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process should timeout or detect writer death on next read")) << "Failed: And the 'reader' process should timeout or detect writer death on next read";
}

TEST_F(ProcessLifecycleTest, Test_2_2_Reader_Crash_Detection) {
    // Scenario: Test 2.2 - Reader Crash Detection

    // Background steps
    // Given we run in harmony
    ASSERT_TRUE(ExecuteStep(StepType::Given, "we run in harmony")) << "Failed: Given we run in harmony";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-reader-crash' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-reader-crash' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-reader-crash' with metadata size '1024' and payload size '10240'";
    // And the 'writer' process connects to buffer 'test-reader-crash'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process connects to buffer 'test-reader-crash'")) << "Failed: And the 'writer' process connects to buffer 'test-reader-crash'";
    // And the 'writer' process writes frame with sequence '1'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with sequence '1'")) << "Failed: And the 'writer' process writes frame with sequence '1'";
    // Then the 'reader' process should read frame with sequence '1'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with sequence '1'")) << "Failed: Then the 'reader' process should read frame with sequence '1'";
    // When the 'writer' process fills buffer completely
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process fills buffer completely")) << "Failed: When the 'writer' process fills buffer completely";
    // And the 'reader' process crashes
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process crashes")) << "Failed: And the 'reader' process crashes";
    // Then wait for '2' seconds
    ASSERT_TRUE(ExecuteStep(StepType::Then, "wait for '2' seconds")) << "Failed: Then wait for '2' seconds";
    // And the 'writer' process should detect reader death on next write
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process should detect reader death on next write")) << "Failed: And the 'writer' process should detect reader death on next write";
}

TEST_F(ProcessLifecycleTest, Test_2_3_Reader_Replacement_After_Crash) {
    // Scenario: Test 2.3 - Reader Replacement After Crash

    // Background steps
    // Given we run in harmony
    ASSERT_TRUE(ExecuteStep(StepType::Given, "we run in harmony")) << "Failed: Given we run in harmony";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-reader-replace' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-reader-replace' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-reader-replace' with metadata size '1024' and payload size '10240'";
    // And the 'writer' process connects to buffer 'test-reader-replace'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process connects to buffer 'test-reader-replace'")) << "Failed: And the 'writer' process connects to buffer 'test-reader-replace'";
    // And the 'writer' process writes frame with sequence '1'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with sequence '1'")) << "Failed: And the 'writer' process writes frame with sequence '1'";
    // Then the 'reader' process should read frame with sequence '1'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with sequence '1'")) << "Failed: Then the 'reader' process should read frame with sequence '1'";
    // When the 'reader' process crashes
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process crashes")) << "Failed: When the 'reader' process crashes";
    // And a new 'reader' process connects to existing buffer 'test-reader-replace'
    ASSERT_TRUE(ExecuteStep(StepType::And, "a new 'reader' process connects to existing buffer 'test-reader-replace'")) << "Failed: And a new 'reader' process connects to existing buffer 'test-reader-replace'";
    // And the 'writer' process writes frame with sequence '2'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with sequence '2'")) << "Failed: And the 'writer' process writes frame with sequence '2'";
    // Then the 'reader' process should read frame with sequence '2'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with sequence '2'")) << "Failed: Then the 'reader' process should read frame with sequence '2'";
    // And the buffer should continue functioning normally
    ASSERT_TRUE(ExecuteStep(StepType::And, "the buffer should continue functioning normally")) << "Failed: And the buffer should continue functioning normally";
}

TEST_F(ProcessLifecycleTest, Test_2_4_Multiple_Writer_Rejection) {
    // Scenario: Test 2.4 - Multiple Writer Rejection

    // Background steps
    // Given we run in harmony
    ASSERT_TRUE(ExecuteStep(StepType::Given, "we run in harmony")) << "Failed: Given we run in harmony";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-multi-writer' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-multi-writer' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-multi-writer' with metadata size '1024' and payload size '10240'";
    // And the 'writer' process connects to buffer 'test-multi-writer'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process connects to buffer 'test-multi-writer'")) << "Failed: And the 'writer' process connects to buffer 'test-multi-writer'";
    // When a second 'writer' process attempts to connect to buffer 'test-multi-writer'
    ASSERT_TRUE(ExecuteStep(StepType::When, "a second 'writer' process attempts to connect to buffer 'test-multi-writer'")) << "Failed: When a second 'writer' process attempts to connect to buffer 'test-multi-writer'";
    // Then the connection should fail with writer exists error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the connection should fail with writer exists error")) << "Failed: Then the connection should fail with writer exists error";
}

TEST_F(ProcessLifecycleTest, Test_2_5_Clean_Shutdown_Sequence) {
    // Scenario: Test 2.5 - Clean Shutdown Sequence

    // Background steps
    // Given we run in harmony
    ASSERT_TRUE(ExecuteStep(StepType::Given, "we run in harmony")) << "Failed: Given we run in harmony";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-shutdown' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-shutdown' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-shutdown' with metadata size '1024' and payload size '10240'";
    // And the 'writer' process connects to buffer 'test-shutdown'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process connects to buffer 'test-shutdown'")) << "Failed: And the 'writer' process connects to buffer 'test-shutdown'";
    // And the 'writer' process writes frame with data 'final message'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with data 'final message'")) << "Failed: And the 'writer' process writes frame with data 'final message'";
    // When the 'writer' process closes connection gracefully
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process closes connection gracefully")) << "Failed: When the 'writer' process closes connection gracefully";
    // Then the 'reader' process should read frame with data 'final message'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frame with data 'final message'")) << "Failed: Then the 'reader' process should read frame with data 'final message'";
    // And the writer should be disconnected
    ASSERT_TRUE(ExecuteStep(StepType::And, "the writer should be disconnected")) << "Failed: And the writer should be disconnected";
    // And the 'reader' process cleanup should succeed
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process cleanup should succeed")) << "Failed: And the 'reader' process cleanup should succeed";
}

