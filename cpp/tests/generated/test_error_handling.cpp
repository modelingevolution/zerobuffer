// Generated from: 03-ErrorHandling.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class ErrorHandlingTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(ErrorHandlingTest, Test_3_1_Metadata_Write_Once_Enforcement) {
    // Scenario: Test 3.1 - Metadata Write-Once Enforcement

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-metadata-once' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-metadata-once' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-metadata-once' with metadata size '1024' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-metadata-once'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-metadata-once'")) << "Failed: When the 'writer' process connects to buffer 'test-metadata-once'";
    // And the 'writer' process writes metadata with size '500'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes metadata with size '500'")) << "Failed: And the 'writer' process writes metadata with size '500'";
    // And the 'writer' process writes frame with data 'test'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with data 'test'")) << "Failed: And the 'writer' process writes frame with data 'test'";
    // And the 'writer' process attempts to write metadata again with size '200'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process attempts to write metadata again with size '200'")) << "Failed: And the 'writer' process attempts to write metadata again with size '200'";
    // Then the 'writer' process verifies the second metadata write should fail
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process verifies the second metadata write should fail")) << "Failed: Then the 'writer' process verifies the second metadata write should fail";
    // And the 'reader' process verifies the original metadata should remain unchanged
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process verifies the original metadata should remain unchanged")) << "Failed: And the 'reader' process verifies the original metadata should remain unchanged";
}

TEST_F(ErrorHandlingTest, Test_3_2_Metadata_Size_Overflow) {
    // Scenario: Test 3.2 - Metadata Size Overflow

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-metadata-overflow' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-metadata-overflow' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-metadata-overflow' with metadata size '1024' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-metadata-overflow'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-metadata-overflow'")) << "Failed: When the 'writer' process connects to buffer 'test-metadata-overflow'";
    // And the 'writer' process attempts to write metadata with size '2048'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process attempts to write metadata with size '2048'")) << "Failed: And the 'writer' process attempts to write metadata with size '2048'";
    // Then the 'writer' process verifies the metadata write should fail with size error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process verifies the metadata write should fail with size error")) << "Failed: Then the 'writer' process verifies the metadata write should fail with size error";
}

TEST_F(ErrorHandlingTest, Test_3_3_Zero_Metadata_Configuration) {
    // Scenario: Test 3.3 - Zero Metadata Configuration

    // Background steps

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-no-metadata' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-no-metadata' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-no-metadata' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-no-metadata'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-no-metadata'")) << "Failed: When the 'writer' process connects to buffer 'test-no-metadata'";
    // And the 'writer' process writes frames without metadata
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frames without metadata")) << "Failed: And the 'writer' process writes frames without metadata";
    // Then the 'reader' process should read frames successfully
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should read frames successfully")) << "Failed: Then the 'reader' process should read frames successfully";
    // And the 'reader' process verifies the system should work without metadata
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process verifies the system should work without metadata")) << "Failed: And the 'reader' process verifies the system should work without metadata";
}

