// Generated from: 13-DuplexChannel.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class DuplexChannelTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(DuplexChannelTest, Test_13_1_Basic_Request_Response) {
    // Scenario: Test 13.1 - Basic Request-Response

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-basic' with metadata size '4096' and payload size '1048576'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-basic' with metadata size '4096' and payload size '1048576'")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-basic' with metadata size '4096' and payload size '1048576'";
    // And the 'server' process starts echo handler
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts echo handler")) << "Failed: And the 'server' process starts echo handler";
    // When the 'client' process creates duplex channel client 'duplex-basic'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-basic'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-basic'";
    // And the 'client' process sends request with size '1'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends request with size '1'")) << "Failed: And the 'client' process sends request with size '1'";
    // Then response should match request with size '1'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "response should match request with size '1'")) << "Failed: Then response should match request with size '1'";
    // When the 'client' process sends request with size '1024'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process sends request with size '1024'")) << "Failed: When the 'client' process sends request with size '1024'";
    // Then response should match request with size '1024'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "response should match request with size '1024'")) << "Failed: Then response should match request with size '1024'";
    // When the 'client' process sends request with size '102400'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process sends request with size '102400'")) << "Failed: When the 'client' process sends request with size '102400'";
    // Then response should match request with size '102400'
    ASSERT_TRUE(ExecuteStep(StepType::Then, "response should match request with size '102400'")) << "Failed: Then response should match request with size '102400'";
}

TEST_F(DuplexChannelTest, Test_13_2_Request_Response_Order_Preservation) {
    // Scenario: Test 13.2 - Request-Response Order Preservation

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-sequence' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-sequence' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-sequence' with default config";
    // And the 'server' process starts echo handler
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts echo handler")) << "Failed: And the 'server' process starts echo handler";
    // When the 'client' process creates duplex channel client 'duplex-sequence'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-sequence'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-sequence'";
    // And the 'client' process sends '10' requests sequentially
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends '10' requests sequentially")) << "Failed: And the 'client' process sends '10' requests sequentially";
    // Then the 'client' process receives '10' responses in order
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'client' process receives '10' responses in order")) << "Failed: Then the 'client' process receives '10' responses in order";
    // And responses should match requests by content
    ASSERT_TRUE(ExecuteStep(StepType::And, "responses should match requests by content")) << "Failed: And responses should match requests by content";
    // And no responses should be lost or duplicated
    ASSERT_TRUE(ExecuteStep(StepType::And, "no responses should be lost or duplicated")) << "Failed: And no responses should be lost or duplicated";
}

TEST_F(DuplexChannelTest, Test_13_3_Concurrent_Client_Operations) {
    // Scenario: Test 13.3 - Concurrent Client Operations

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-concurrent' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-concurrent' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-concurrent' with default config";
    // And the 'server' process starts echo handler
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts echo handler")) << "Failed: And the 'server' process starts echo handler";
    // When the 'client' process creates duplex channel client 'duplex-concurrent'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-concurrent'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-concurrent'";
    // And the 'client' process sends '20' requests from single thread
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends '20' requests from single thread")) << "Failed: And the 'client' process sends '20' requests from single thread";
    // Then the 'client' process receives exactly '20' responses
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'client' process receives exactly '20' responses")) << "Failed: Then the 'client' process receives exactly '20' responses";
    // And all '20' responses match their requests
    ASSERT_TRUE(ExecuteStep(StepType::And, "all '20' responses match their requests")) << "Failed: And all '20' responses match their requests";
}

TEST_F(DuplexChannelTest, Test_13_4_Server_Processing_Mode_SingleThread) {
    // Scenario: Test 13.4 - Server Processing Mode SingleThread

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-singlethread' with processing mode 'SingleThread'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-singlethread' with processing mode 'SingleThread'")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-singlethread' with processing mode 'SingleThread'";
    // And the 'server' process starts handler with '100' ms processing time
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts handler with '100' ms processing time")) << "Failed: And the 'server' process starts handler with '100' ms processing time";
    // When the 'client' process creates duplex channel client 'duplex-singlethread'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-singlethread'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-singlethread'";
    // And the 'client' process sends '3' requests sequentially
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends '3' requests sequentially")) << "Failed: And the 'client' process sends '3' requests sequentially";
    // And the 'client' process measures total response time
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process measures total response time")) << "Failed: And the 'client' process measures total response time";
    // Then total time should be at least '300' ms
    ASSERT_TRUE(ExecuteStep(StepType::Then, "total time should be at least '300' ms")) << "Failed: Then total time should be at least '300' ms";
    // And responses should arrive in order
    ASSERT_TRUE(ExecuteStep(StepType::And, "responses should arrive in order")) << "Failed: And responses should arrive in order";
}

TEST_F(DuplexChannelTest, Test_13_5_Server_Death_During_Processing) {
    // Scenario: Test 13.5 - Server Death During Processing

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-crash' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-crash' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-crash' with default config";
    // And the 'server' process starts handler that crashes after '100' ms
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts handler that crashes after '100' ms")) << "Failed: And the 'server' process starts handler that crashes after '100' ms";
    // When the 'client' process creates duplex channel client 'duplex-crash'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-crash'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-crash'";
    // And the 'client' process sends request of '1024' bytes
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends request of '1024' bytes")) << "Failed: And the 'client' process sends request of '1024' bytes";
    // Then the 'server' process simulates crash during processing
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'server' process simulates crash during processing")) << "Failed: Then the 'server' process simulates crash during processing";
    // When the 'client' process waits for response with timeout '5' seconds
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process waits for response with timeout '5' seconds")) << "Failed: When the 'client' process waits for response with timeout '5' seconds";
    // Then the 'client' process should detect server death
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'client' process should detect server death")) << "Failed: Then the 'client' process should detect server death";
    // And an appropriate exception should be thrown
    ASSERT_TRUE(ExecuteStep(StepType::And, "an appropriate exception should be thrown")) << "Failed: And an appropriate exception should be thrown";
}

TEST_F(DuplexChannelTest, Test_13_6_Buffer_Full_on_Response_Channel) {
    // Scenario: Test 13.6 - Buffer Full on Response Channel

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-full' with metadata size '1024' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-full' with metadata size '1024' and payload size '10240'")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-full' with metadata size '1024' and payload size '10240'";
    // And the 'server' process starts handler that doubles request size
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts handler that doubles request size")) << "Failed: And the 'server' process starts handler that doubles request size";
    // When the 'client' process creates duplex channel client 'duplex-full'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-full'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-full'";
    // And the 'client' process sends request with size '4096'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends request with size '4096'")) << "Failed: And the 'client' process sends request with size '4096'";
    // And the 'client' process does not read responses
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process does not read responses")) << "Failed: And the 'client' process does not read responses";
    // Then the 'server' process attempts to send response of '8192' bytes
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'server' process attempts to send response of '8192' bytes")) << "Failed: Then the 'server' process attempts to send response of '8192' bytes";
    // And the 'server' process should block on response write
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process should block on response write")) << "Failed: And the 'server' process should block on response write";
    // When the 'client' process reads one response
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process reads one response")) << "Failed: When the 'client' process reads one response";
    // Then the 'server' process should unblock and complete write
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'server' process should unblock and complete write")) << "Failed: Then the 'server' process should unblock and complete write";
}

TEST_F(DuplexChannelTest, Test_13_7_Zero_Copy_Client_Operations) {
    // Scenario: Test 13.7 - Zero-Copy Client Operations

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-zerocopy' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-zerocopy' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-zerocopy' with default config";
    // And the 'server' process starts echo handler
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts echo handler")) << "Failed: And the 'server' process starts echo handler";
    // When the 'client' process creates duplex channel client 'duplex-zerocopy'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-zerocopy'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-zerocopy'";
    // And the 'client' process acquires zero-copy request buffer of size '4096'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process acquires zero-copy request buffer of size '4096'")) << "Failed: And the 'client' process acquires zero-copy request buffer of size '4096'";
    // And the 'client' process fills buffer with test pattern
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process fills buffer with test pattern")) << "Failed: And the 'client' process fills buffer with test pattern";
    // And the 'client' process commits request
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process commits request")) << "Failed: And the 'client' process commits request";
    // Then response should contain same test pattern
    ASSERT_TRUE(ExecuteStep(StepType::Then, "response should contain same test pattern")) << "Failed: Then response should contain same test pattern";
    // And no memory allocations in send path
    ASSERT_TRUE(ExecuteStep(StepType::And, "no memory allocations in send path")) << "Failed: And no memory allocations in send path";
}

TEST_F(DuplexChannelTest, Test_13_8_Immutable_Server_Handler_Types) {
    // Scenario: Test 13.8 - Immutable Server Handler Types

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-transform' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-transform' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-transform' with default config";
    // And the 'server' process starts handler that implements XOR with key '0xFF'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts handler that implements XOR with key '0xFF'")) << "Failed: And the 'server' process starts handler that implements XOR with key '0xFF'";
    // When the 'client' process creates duplex channel client 'duplex-transform'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-transform'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-transform'";
    // And the 'client' process sends '10240' byte frame with test pattern
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends '10240' byte frame with test pattern")) << "Failed: And the 'client' process sends '10240' byte frame with test pattern";
    // Then response should contain XOR transformed data
    ASSERT_TRUE(ExecuteStep(StepType::Then, "response should contain XOR transformed data")) << "Failed: Then response should contain XOR transformed data";
    // And the server handler receives immutable request frame
    ASSERT_TRUE(ExecuteStep(StepType::And, "the server handler receives immutable request frame")) << "Failed: And the server handler receives immutable request frame";
    // And the server handler returns new response data
    ASSERT_TRUE(ExecuteStep(StepType::And, "the server handler returns new response data")) << "Failed: And the server handler returns new response data";
}

TEST_F(DuplexChannelTest, Test_13_9_Client_Death_During_Response_Wait) {
    // Scenario: Test 13.9 - Client Death During Response Wait

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-client-crash' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-client-crash' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-client-crash' with default config";
    // And the 'server' process starts handler with '2' second processing delay
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts handler with '2' second processing delay")) << "Failed: And the 'server' process starts handler with '2' second processing delay";
    // When the 'client' process creates duplex channel client 'duplex-client-crash'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-client-crash'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-client-crash'";
    // And the 'client' process sends request
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends request")) << "Failed: And the 'client' process sends request";
    // And the 'client' process simulates crash after '1' second
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process simulates crash after '1' second")) << "Failed: And the 'client' process simulates crash after '1' second";
    // Then the 'server' process completes processing after '2' seconds
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'server' process completes processing after '2' seconds")) << "Failed: Then the 'server' process completes processing after '2' seconds";
    // And the 'server' process attempts to send response
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process attempts to send response")) << "Failed: And the 'server' process attempts to send response";
    // And the 'server' process detects client death when writing
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process detects client death when writing")) << "Failed: And the 'server' process detects client death when writing";
    // And the 'server' process continues processing other requests
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process continues processing other requests")) << "Failed: And the 'server' process continues processing other requests";
}

TEST_F(DuplexChannelTest, Test_13_10_Channel_Cleanup_on_Dispose) {
    // Scenario: Test 13.10 - Channel Cleanup on Dispose

    // Background steps

    // Scenario steps
    // Given the 'server' process creates immutable duplex channel 'duplex-cleanup' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'server' process creates immutable duplex channel 'duplex-cleanup' with default config")) << "Failed: Given the 'server' process creates immutable duplex channel 'duplex-cleanup' with default config";
    // And the 'server' process starts echo handler
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'server' process starts echo handler")) << "Failed: And the 'server' process starts echo handler";
    // When the 'client' process creates duplex channel client 'duplex-cleanup'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process creates duplex channel client 'duplex-cleanup'")) << "Failed: When the 'client' process creates duplex channel client 'duplex-cleanup'";
    // And the 'client' process sends '5' requests
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process sends '5' requests")) << "Failed: And the 'client' process sends '5' requests";
    // And the 'client' process receives '3' responses
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'client' process receives '3' responses")) << "Failed: And the 'client' process receives '3' responses";
    // Then the 'server' process disposes server while '2' responses pending
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'server' process disposes server while '2' responses pending")) << "Failed: Then the 'server' process disposes server while '2' responses pending";
    // When the 'client' process attempts to receive pending responses
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'client' process attempts to receive pending responses")) << "Failed: When the 'client' process attempts to receive pending responses";
    // Then the 'client' process should receive exception on pending
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'client' process should receive exception on pending")) << "Failed: Then the 'client' process should receive exception on pending";
    // And all shared memory should be cleaned up
    ASSERT_TRUE(ExecuteStep(StepType::And, "all shared memory should be cleaned up")) << "Failed: And all shared memory should be cleaned up";
    // When a new 'server' process creates immutable duplex channel 'duplex-cleanup'
    ASSERT_TRUE(ExecuteStep(StepType::When, "a new 'server' process creates immutable duplex channel 'duplex-cleanup'")) << "Failed: When a new 'server' process creates immutable duplex channel 'duplex-cleanup'";
    // Then the new server should reuse same channel name successfully
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the new server should reuse same channel name successfully")) << "Failed: Then the new server should reuse same channel name successfully";
}

