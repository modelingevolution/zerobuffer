// Generated from: 05-CorruptionDetection.feature
// DO NOT EDIT - This file is auto-generated by harmony-cpp-gen

#include <gtest/gtest.h>
#include <memory>
#include <string>
#include <vector>
#include "step_definitions/step_registry.h"
#include "step_definitions/test_context.h"
#include <zerobuffer/logger.h>

using namespace zerobuffer::steps;

enum class StepType {
    Given,
    When,
    Then,
    And,
    But
};

class CorruptionDetectionTest : public ::testing::Test {
protected:
    StepRegistry& registry = StepRegistry::getInstance();
    TestContext context;

    void SetUp() override {
        // Register all available step definitions
        registry.registerAllSteps();
        context.reset();
    }

    void TearDown() override {
        // Clean up any resources
        context.reset();
    }

    bool ExecuteStep(StepType type, const std::string& step) {
        // Log SpecFlow-like output using logger (not stdout for JSON-RPC compatibility)
        const char* keyword = "Given";
        switch(type) {
            case StepType::Given: keyword = "Given"; break;
            case StepType::When: keyword = "When"; break;
            case StepType::Then: keyword = "Then"; break;
            case StepType::And: keyword = "  And"; break;
            case StepType::But: keyword = "  But"; break;
        }
        // Use INFO level for step execution output (SpecFlow-like format)
        ZEROBUFFER_LOG_INFO("TestRunner") << keyword << " " << step;

        bool result = registry.executeStep(step, context);
        if (!result) {
            ZEROBUFFER_LOG_ERROR("TestRunner") << "  âœ— Step not found: " << step;
        }
        return result;
    }
};

TEST_F(CorruptionDetectionTest, Test_5_1_Corrupted_OIEB_Detection) {
    // Scenario: Test 5.1 - Corrupted OIEB Detection

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-corrupt-oieb' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-corrupt-oieb' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-corrupt-oieb' with default config";
    // When the 'writer' process connects to buffer 'test-corrupt-oieb'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-corrupt-oieb'")) << "Failed: When the 'writer' process connects to buffer 'test-corrupt-oieb'";
    // And the 'writer' process writes frame with data 'valid'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with data 'valid'")) << "Failed: And the 'writer' process writes frame with data 'valid'";
    // And the test corrupts OIEB field 'operation_size' to wrong value
    ASSERT_TRUE(ExecuteStep(StepType::And, "the test corrupts OIEB field 'operation_size' to wrong value")) << "Failed: And the test corrupts OIEB field 'operation_size' to wrong value";
    // When a second 'writer' process attempts to connect to buffer 'test-corrupt-oieb'
    ASSERT_TRUE(ExecuteStep(StepType::When, "a second 'writer' process attempts to connect to buffer 'test-corrupt-oieb'")) << "Failed: When a second 'writer' process attempts to connect to buffer 'test-corrupt-oieb'";
    // Then the connection should fail with invalid OIEB error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the connection should fail with invalid OIEB error")) << "Failed: Then the connection should fail with invalid OIEB error";
}

TEST_F(CorruptionDetectionTest, Test_5_2_Invalid_Frame_Header_Detection) {
    // Scenario: Test 5.2 - Invalid Frame Header Detection

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-invalid-header' with default config
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-invalid-header' with default config")) << "Failed: Given the 'reader' process creates buffer 'test-invalid-header' with default config";
    // When the 'writer' process connects to buffer 'test-invalid-header'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-invalid-header'")) << "Failed: When the 'writer' process connects to buffer 'test-invalid-header'";
    // And the 'writer' process writes frame with data 'test'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process writes frame with data 'test'")) << "Failed: And the 'writer' process writes frame with data 'test'";
    // And the test corrupts frame header 'payload_size' to '0'
    ASSERT_TRUE(ExecuteStep(StepType::And, "the test corrupts frame header 'payload_size' to '0'")) << "Failed: And the test corrupts frame header 'payload_size' to '0'";
    // When the 'reader' process attempts to read frame
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process attempts to read frame")) << "Failed: When the 'reader' process attempts to read frame";
    // Then the read should fail with invalid frame size error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the read should fail with invalid frame size error")) << "Failed: Then the read should fail with invalid frame size error";
}

TEST_F(CorruptionDetectionTest, Test_5_3_Reader_Death_During_Write) {
    // Scenario: Test 5.3 - Reader Death During Write

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-reader-death' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-reader-death' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-reader-death' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-reader-death'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-reader-death'")) << "Failed: When the 'writer' process connects to buffer 'test-reader-death'";
    // And the 'writer' process starts writing large frame of '8192' bytes
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process starts writing large frame of '8192' bytes")) << "Failed: And the 'writer' process starts writing large frame of '8192' bytes";
    // And the 'reader' process crashes while write in progress
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'reader' process crashes while write in progress")) << "Failed: And the 'reader' process crashes while write in progress";
    // And the 'writer' process completes write operation
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process completes write operation")) << "Failed: And the 'writer' process completes write operation";
    // And the 'writer' process attempts next operation
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process attempts next operation")) << "Failed: And the 'writer' process attempts next operation";
    // Then the 'writer' process should detect reader death
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should detect reader death")) << "Failed: Then the 'writer' process should detect reader death";
    // And the 'writer' process should throw reader dead exception
    ASSERT_TRUE(ExecuteStep(StepType::And, "the 'writer' process should throw reader dead exception")) << "Failed: And the 'writer' process should throw reader dead exception";
}

TEST_F(CorruptionDetectionTest, Test_5_5_Wrap_Around_With_Wasted_Space) {
    // Scenario: Test 5.5 - Wrap-Around With Wasted Space

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-waste' with metadata size '0' and payload size '10240'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-waste' with metadata size '0' and payload size '10240'")) << "Failed: Given the 'reader' process creates buffer 'test-waste' with metadata size '0' and payload size '10240'";
    // When the 'writer' process connects to buffer 'test-waste'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-waste'")) << "Failed: When the 'writer' process connects to buffer 'test-waste'";
    // And writes frame that leaves '100' bytes at end with 'incremental' pattern
    ASSERT_TRUE(ExecuteStep(StepType::And, "writes frame that leaves '100' bytes at end with 'incremental' pattern")) << "Failed: And writes frame that leaves '100' bytes at end with 'incremental' pattern";
    // And attempts to write '200' byte frame with 'sequential' pattern
    ASSERT_TRUE(ExecuteStep(StepType::And, "attempts to write '200' byte frame with 'sequential' pattern")) << "Failed: And attempts to write '200' byte frame with 'sequential' pattern";
    // Then the 'writer' process should write wrap marker at current position
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should write wrap marker at current position")) << "Failed: Then the 'writer' process should write wrap marker at current position";
    // And should see payload_free_bytes reduced by wasted space
    ASSERT_TRUE(ExecuteStep(StepType::And, "should see payload_free_bytes reduced by wasted space")) << "Failed: And should see payload_free_bytes reduced by wasted space";
    // And frame should be written at buffer start
    ASSERT_TRUE(ExecuteStep(StepType::And, "frame should be written at buffer start")) << "Failed: And frame should be written at buffer start";
    // When the 'reader' process reads next frame
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'reader' process reads next frame")) << "Failed: When the 'reader' process reads next frame";
    // Then the 'reader' process should detect wrap marker
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process should detect wrap marker")) << "Failed: Then the 'reader' process should detect wrap marker";
    // And should jump to buffer start
    ASSERT_TRUE(ExecuteStep(StepType::And, "should jump to buffer start")) << "Failed: And should jump to buffer start";
    // And should read '200' byte frame successfully with 'sequential' pattern
    ASSERT_TRUE(ExecuteStep(StepType::And, "should read '200' byte frame successfully with 'sequential' pattern")) << "Failed: And should read '200' byte frame successfully with 'sequential' pattern";
}

TEST_F(CorruptionDetectionTest, Test_5_6_Continuous_Free_Space_Calculation) {
    // Scenario: Test 5.6 - Continuous Free Space Calculation

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-free-space' with specific configuration
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-free-space' with specific configuration")) << "Failed: Given the 'reader' process creates buffer 'test-free-space' with specific configuration";
    // When the system tests continuous_free_bytes calculation with:
    ASSERT_TRUE(ExecuteStep(StepType::When, "the system tests continuous_free_bytes calculation with:")) << "Failed: When the system tests continuous_free_bytes calculation with:";
    // Then the 'reader' process calculations should match specification
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'reader' process calculations should match specification")) << "Failed: Then the 'reader' process calculations should match specification";
}

TEST_F(CorruptionDetectionTest, Test_5_7_Maximum_Frame_Size) {
    // Scenario: Test 5.7 - Maximum Frame Size

    // Background steps
    // Given the test environment is initialized
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the test environment is initialized")) << "Failed: Given the test environment is initialized";
    // And all processes are ready
    ASSERT_TRUE(ExecuteStep(StepType::And, "all processes are ready")) << "Failed: And all processes are ready";

    // Scenario steps
    // Given the 'reader' process creates buffer 'test-max-frame' with metadata size '0' and payload size '104857600'
    ASSERT_TRUE(ExecuteStep(StepType::Given, "the 'reader' process creates buffer 'test-max-frame' with metadata size '0' and payload size '104857600'")) << "Failed: Given the 'reader' process creates buffer 'test-max-frame' with metadata size '0' and payload size '104857600'";
    // When the 'writer' process connects to buffer 'test-max-frame'
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process connects to buffer 'test-max-frame'")) << "Failed: When the 'writer' process connects to buffer 'test-max-frame'";
    // And writes frame matching exactly payload size minus header
    ASSERT_TRUE(ExecuteStep(StepType::And, "writes frame matching exactly payload size minus header")) << "Failed: And writes frame matching exactly payload size minus header";
    // Then the 'writer' process should verify frame was written successfully
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process should verify frame was written successfully")) << "Failed: Then the 'writer' process should verify frame was written successfully";
    // When the 'writer' process attempts to write frame exceeding payload size
    ASSERT_TRUE(ExecuteStep(StepType::When, "the 'writer' process attempts to write frame exceeding payload size")) << "Failed: When the 'writer' process attempts to write frame exceeding payload size";
    // Then the 'writer' process write should be rejected with appropriate error
    ASSERT_TRUE(ExecuteStep(StepType::Then, "the 'writer' process write should be rejected with appropriate error")) << "Failed: Then the 'writer' process write should be rejected with appropriate error";
}

