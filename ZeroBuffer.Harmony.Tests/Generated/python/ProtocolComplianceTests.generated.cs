// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Python;

public class ProtocolComplianceTests : HarmonyTestBase
{
    public ProtocolComplianceTests(ITestOutputHelper output) : base(output) { }

    #region Static Test Data
    private static readonly string Test_12_3_Lock_File_Semantics_reader_python_Json = @"{""TestId"":""python-test-12-3---lock-file-semantics"",""FeatureId"":12,""ScenarioName"":""Test 12.3 - Lock File Semantics"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""Given"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}},{""Type"":""Given"",""Text"":""we are in DEBUG mode for protocol compliance tests"",""Process"":null,""ProcessedText"":""we are in DEBUG mode for protocol compliance tests"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-lock-semantics\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-lock-semantics\u0027 with default config"",""Parameters"":{}},{""Type"":""Then"",""Text"":""verify lock file exists at correct location"",""Process"":null,""ProcessedText"":""verify lock file exists at correct location"",""Parameters"":{}},{""Type"":""Then"",""Text"":""verify lock file is actually locked"",""Process"":""reader"",""ProcessedText"":""verify lock file is actually locked"",""Parameters"":{}},{""Type"":""When"",""Text"":""kill reader process"",""Process"":null,""ProcessedText"":""kill reader process"",""Parameters"":{}},{""Type"":""Then"",""Text"":""new reader can acquire lock after detecting stale"",""Process"":null,""ProcessedText"":""new reader can acquire lock after detecting stale"",""Parameters"":{}},{""Type"":""When"",""Text"":""graceful shutdown"",""Process"":null,""ProcessedText"":""graceful shutdown"",""Parameters"":{}},{""Type"":""Then"",""Text"":""verify lock file is removed"",""Process"":null,""ProcessedText"":""verify lock file is removed"",""Parameters"":{}}]}";

    #endregion

    #region Scenarios Collection
    public static IEnumerable<ScenarioExecution> Scenarios => new[]
    {
        DeserializeScenarioStatic(Test_12_3_Lock_File_Semantics_reader_python_Json)
    };
    #endregion

    #region Test Methods
    [Fact(DisplayName = "Test 12.3 - Lock File Semantics [reader=python]")]
    [Trait("Scenario", "Test 12.3 - Lock File Semantics")]
    [Trait("Platform", "python")]
    [Trait("Uses", "python")]
    [Trait("Feature", "12-ProtocolCompliance")]    public async Task Test_12_3_Lock_File_Semantics_reader_python()
    {
        var scenario = DeserializeScenario(Test_12_3_Lock_File_Semantics_reader_python_Json);
        await ExecuteScenarioAsync(scenario);
    }


    #endregion
}