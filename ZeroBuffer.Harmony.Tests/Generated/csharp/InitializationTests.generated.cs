// <auto-generated />
using System;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Csharp;

public class InitializationTests : HarmonyTestBase
{
    public InitializationTests(ITestOutputHelper output) : base(output) { }

    [Fact(DisplayName = "Test 3.2 - Concurrent Initialization Race [reader=csharp]")]
    [Trait("Scenario", "Test 3.2 - Concurrent Initialization Race")]
    [Trait("Platform", "csharp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "Initialization")]    public async Task Test_3_2_Concurrent_Initialization_Race_reader_csharp()
    {
        const string scenarioJson = @"{""TestId"":""csharp-test-3-2---concurrent-initialization-race"",""FeatureId"":7,""ScenarioName"":""Test 3.2 - Concurrent Initialization Race"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""csharp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""two readers \u0027csharp\u0027 and \u0027python\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""When"",""Text"":""both simultaneously attempt to create buffer \u0027race-test\u0027"",""Process"":null,""ProcessedText"":""both simultaneously attempt to create buffer \u0027race-test\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""only one should succeed"",""Process"":null,""ProcessedText"":""only one should succeed"",""Parameters"":{}},{""Type"":""And"",""Text"":""other should receive appropriate error"",""Process"":""reader"",""ProcessedText"":""other should receive appropriate error"",""Parameters"":{}},{""Type"":""And"",""Text"":""no resource corruption should occur"",""Process"":""reader"",""ProcessedText"":""no resource corruption should occur"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 3.3 - Writer Before Reader [writer=csharp]")]
    [Trait("Scenario", "Test 3.3 - Writer Before Reader")]
    [Trait("Platform", "csharp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "Initialization")]    public async Task Test_3_3_Writer_Before_Reader_writer_csharp()
    {
        const string scenarioJson = @"{""TestId"":""csharp-test-3-3---writer-before-reader"",""FeatureId"":7,""ScenarioName"":""Test 3.3 - Writer Before Reader"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""writer"":""csharp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to connect to non-existent buffer \u0027no-reader\u0027"",""Process"":""writer"",""ProcessedText"":""attempt to connect to non-existent buffer \u0027no-reader\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""connection should fail with appropriate error"",""Process"":null,""ProcessedText"":""connection should fail with appropriate error"",""Parameters"":{}},{""Type"":""And"",""Text"":""error should indicate no shared memory found"",""Process"":""writer"",""ProcessedText"":""error should indicate no shared memory found"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

}