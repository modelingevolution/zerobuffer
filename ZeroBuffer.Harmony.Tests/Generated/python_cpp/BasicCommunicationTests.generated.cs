// <auto-generated />
using System;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Python_Cpp;

public class BasicCommunicationTests : HarmonyTestBase
{
    public BasicCommunicationTests(ITestOutputHelper output) : base(output) { }

    [Fact(DisplayName = "Test 1.1 - Simple Write-Read Cycle [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 1.1 - Simple Write-Read Cycle")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "BasicCommunication")]    public async Task Test_1_1_Simple_Write_Read_Cycle_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-1-1---simple-write-read-cycle"",""ScenarioName"":""Test 1.1 - Simple Write-Read Cycle"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""And"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-basic\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-basic\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-basic\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-basic\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes metadata with size \u0027100\u0027"",""Process"":""writer"",""ProcessedText"":""writes metadata with size \u0027100\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with size \u00271024\u0027 and sequence \u00271\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with size \u00271024\u0027 and sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should read frame with sequence \u00271\u0027 and size \u00271024\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with sequence \u00271\u0027 and size \u00271024\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should validate frame data"",""Process"":""reader"",""ProcessedText"":""should validate frame data"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process signals space available"",""Process"":""reader"",""ProcessedText"":""signals space available"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 1.2 - Multiple Frames Sequential [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 1.2 - Multiple Frames Sequential")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "BasicCommunication")]    public async Task Test_1_2_Multiple_Frames_Sequential_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-1-2---multiple-frames-sequential"",""ScenarioName"":""Test 1.2 - Multiple Frames Sequential"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""And"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-multi\u0027 with metadata size \u00271024\u0027 and payload size \u0027102400\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-multi\u0027 with metadata size \u00271024\u0027 and payload size \u0027102400\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-multi\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-multi\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with sequence \u00271\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with sequence \u00272\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with sequence \u00272\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with sequence \u00273\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with sequence \u00273\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should read frame with sequence \u00271\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process signals space available"",""Process"":""reader"",""ProcessedText"":""signals space available"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should read frame with sequence \u00272\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with sequence \u00272\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process signals space available"",""Process"":""reader"",""ProcessedText"":""signals space available"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should read frame with sequence \u00273\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with sequence \u00273\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should verify all frames maintain sequential order"",""Process"":""reader"",""ProcessedText"":""should verify all frames maintain sequential order"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 1.3 - Buffer Full Handling [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 1.3 - Buffer Full Handling")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "BasicCommunication")]    public async Task Test_1_3_Buffer_Full_Handling_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-1-3---buffer-full-handling"",""ScenarioName"":""Test 1.3 - Buffer Full Handling"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""And"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-full\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-full\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-full\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-full\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frames until buffer is full"",""Process"":""writer"",""ProcessedText"":""writes frames until buffer is full"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027writer\u0027 process should experience timeout or buffer full on next write"",""Process"":""writer"",""ProcessedText"":""should experience timeout or buffer full on next write"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027reader\u0027 process reads one frame"",""Process"":""reader"",""ProcessedText"":""reads one frame"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process signals space available"",""Process"":""reader"",""ProcessedText"":""signals space available"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027writer\u0027 process should write successfully immediately"",""Process"":""writer"",""ProcessedText"":""should write successfully immediately"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 1.4 - Zero-Copy Write Operations [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 1.4 - Zero-Copy Write Operations")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "BasicCommunication")]    public async Task Test_1_4_Zero_Copy_Write_Operations_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-1-4---zero-copy-write-operations"",""ScenarioName"":""Test 1.4 - Zero-Copy Write Operations"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""And"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-zerocopy\u0027 with metadata size \u00271024\u0027 and payload size \u0027102400\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-zerocopy\u0027 with metadata size \u00271024\u0027 and payload size \u0027102400\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-zerocopy\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-zerocopy\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process requests zero-copy frame of size \u00274096\u0027"",""Process"":""writer"",""ProcessedText"":""requests zero-copy frame of size \u00274096\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process fills zero-copy buffer with test pattern"",""Process"":""writer"",""ProcessedText"":""fills zero-copy buffer with test pattern"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process commits zero-copy frame"",""Process"":""writer"",""ProcessedText"":""commits zero-copy frame"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should read frame with size \u00274096\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with size \u00274096\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should verify frame data matches test pattern"",""Process"":""reader"",""ProcessedText"":""should verify frame data matches test pattern"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 1.5 - Mixed Frame Sizes [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 1.5 - Mixed Frame Sizes")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "BasicCommunication")]    public async Task Test_1_5_Mixed_Frame_Sizes_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-1-5---mixed-frame-sizes"",""ScenarioName"":""Test 1.5 - Mixed Frame Sizes"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""And"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-mixed\u0027 with metadata size \u00271024\u0027 and payload size \u0027102400\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-mixed\u0027 with metadata size \u00271024\u0027 and payload size \u0027102400\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-mixed\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-mixed\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with size \u0027100\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with size \u0027100\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with size \u00271024\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with size \u00271024\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with size \u002710240\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with size \u002710240\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with size \u00271\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with size \u00271\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should read 4 frames with correct sizes in order"",""Process"":""reader"",""ProcessedText"":""should read 4 frames with correct sizes in order"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 1.6 - Metadata Update During Operation [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 1.6 - Metadata Update During Operation")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "BasicCommunication")]    public async Task Test_1_6_Metadata_Update_During_Operation_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-1-6---metadata-update-during-operation"",""ScenarioName"":""Test 1.6 - Metadata Update During Operation"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""And"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-metadata-update\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-metadata-update\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-metadata-update\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-metadata-update\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes metadata \u0027version=1.0\u0027"",""Process"":""writer"",""ProcessedText"":""writes metadata \u0027version=1.0\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with data \u0027frame1\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with data \u0027frame1\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should have metadata \u0027version=1.0\u0027"",""Process"":""reader"",""ProcessedText"":""should have metadata \u0027version=1.0\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should read frame with data \u0027frame1\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with data \u0027frame1\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes metadata \u0027version=2.0\u0027"",""Process"":""writer"",""ProcessedText"":""writes metadata \u0027version=2.0\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027writer\u0027 process writes frame with data \u0027frame2\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with data \u0027frame2\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should have metadata \u0027version=2.0\u0027"",""Process"":""reader"",""ProcessedText"":""should have metadata \u0027version=2.0\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""the \u0027reader\u0027 process should read frame with data \u0027frame2\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with data \u0027frame2\u0027"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

}