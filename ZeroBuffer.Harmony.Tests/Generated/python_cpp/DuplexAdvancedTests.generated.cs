// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Python_Cpp;

public class DuplexAdvancedTests : HarmonyTestBase
{
    public DuplexAdvancedTests(ITestOutputHelper output) : base(output) { }

    #region Static Test Data
    private static readonly string Test_14_5_Mutable_vs_Immutable_Server_client_python_server_cpp_Json = @"{""TestId"":""python-cpp-test-14-5---mutable-vs-immutable-server"",""FeatureId"":3,""ScenarioName"":""Test 14.5 - Mutable vs Immutable Server"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""client"":""python"",""server"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027server\u0027 process creates duplex channel \u0027duplex-mutable\u0027 with mutable handler"",""Process"":""server"",""ProcessedText"":""creates duplex channel \u0027duplex-mutable\u0027 with mutable handler"",""Parameters"":{}},{""Type"":""Given"",""Text"":""the \u0027server\u0027 process creates duplex channel \u0027duplex-immutable\u0027 with immutable handler"",""Process"":""server"",""ProcessedText"":""creates duplex channel \u0027duplex-immutable\u0027 with immutable handler"",""Parameters"":{}},{""Type"":""Given"",""Text"":""both handlers implement XOR with key \u00270xFF\u0027"",""Process"":""server"",""ProcessedText"":""both handlers implement XOR with key \u00270xFF\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process creates duplex channel client \u0027duplex-mutable\u0027"",""Process"":""client"",""ProcessedText"":""creates duplex channel client \u0027duplex-mutable\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process creates duplex channel client \u0027duplex-immutable\u0027"",""Process"":""client"",""ProcessedText"":""creates duplex channel client \u0027duplex-immutable\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process sends identical \u002710240\u0027 byte frames to both"",""Process"":""client"",""ProcessedText"":""sends identical \u002710240\u0027 byte frames to both"",""Parameters"":{}},{""Type"":""Then"",""Text"":""both should produce identical XOR results"",""Process"":null,""ProcessedText"":""both should produce identical XOR results"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the mutable server should modify in-place"",""Process"":""client"",""ProcessedText"":""the mutable server should modify in-place"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the mutable server should have no allocations"",""Process"":""client"",""ProcessedText"":""the mutable server should have no allocations"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the immutable server should return new data"",""Process"":""client"",""ProcessedText"":""the immutable server should return new data"",""Parameters"":{}}]}";
    private static readonly string Test_14_7_Client_Death_During_Response_Wait_client_python_server_cpp_Json = @"{""TestId"":""python-cpp-test-14-7---client-death-during-response-wait"",""FeatureId"":3,""ScenarioName"":""Test 14.7 - Client Death During Response Wait"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""client"":""python"",""server"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027server\u0027 process creates duplex channel \u0027duplex-client-crash\u0027 with default config"",""Process"":""server"",""ProcessedText"":""creates duplex channel \u0027duplex-client-crash\u0027 with default config"",""Parameters"":{}},{""Type"":""Given"",""Text"":""the \u0027server\u0027 process starts handler with \u00272\u0027 second processing delay"",""Process"":""server"",""ProcessedText"":""starts handler with \u00272\u0027 second processing delay"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process creates duplex channel client \u0027duplex-client-crash\u0027"",""Process"":""client"",""ProcessedText"":""creates duplex channel client \u0027duplex-client-crash\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process sends request"",""Process"":""client"",""ProcessedText"":""sends request"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process simulates crash after \u00271\u0027 second"",""Process"":""client"",""ProcessedText"":""simulates crash after \u00271\u0027 second"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027server\u0027 process completes processing after \u00272\u0027 seconds"",""Process"":""server"",""ProcessedText"":""completes processing after \u00272\u0027 seconds"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027server\u0027 process attempts to send response"",""Process"":""server"",""ProcessedText"":""attempts to send response"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027server\u0027 process detects client death when writing"",""Process"":""server"",""ProcessedText"":""detects client death when writing"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027server\u0027 process continues processing other requests"",""Process"":""server"",""ProcessedText"":""continues processing other requests"",""Parameters"":{}}]}";
    private static readonly string Test_14_10_Channel_Cleanup_on_Dispose_client_python_server_cpp_Json = @"{""TestId"":""python-cpp-test-14-10---channel-cleanup-on-dispose"",""FeatureId"":3,""ScenarioName"":""Test 14.10 - Channel Cleanup on Dispose"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""client"":""python"",""server"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027server\u0027 process creates duplex channel \u0027duplex-cleanup\u0027 with default config"",""Process"":""server"",""ProcessedText"":""creates duplex channel \u0027duplex-cleanup\u0027 with default config"",""Parameters"":{}},{""Type"":""Given"",""Text"":""the \u0027server\u0027 process starts echo handler"",""Process"":""server"",""ProcessedText"":""starts echo handler"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process creates duplex channel client \u0027duplex-cleanup\u0027"",""Process"":""client"",""ProcessedText"":""creates duplex channel client \u0027duplex-cleanup\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process sends \u00275\u0027 requests"",""Process"":""client"",""ProcessedText"":""sends \u00275\u0027 requests"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process receives \u00273\u0027 responses"",""Process"":""client"",""ProcessedText"":""receives \u00273\u0027 responses"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027server\u0027 process disposes server while \u00272\u0027 responses pending"",""Process"":""server"",""ProcessedText"":""disposes server while \u00272\u0027 responses pending"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027client\u0027 process attempts to receive pending responses"",""Process"":""client"",""ProcessedText"":""attempts to receive pending responses"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027client\u0027 process should receive exception on pending"",""Process"":""client"",""ProcessedText"":""should receive exception on pending"",""Parameters"":{}},{""Type"":""Then"",""Text"":""all shared memory should be cleaned up"",""Process"":""client"",""ProcessedText"":""all shared memory should be cleaned up"",""Parameters"":{}},{""Type"":""When"",""Text"":""a new \u0027server\u0027 process creates duplex channel \u0027duplex-cleanup\u0027"",""Process"":null,""ProcessedText"":""a new \u0027server\u0027 process creates duplex channel \u0027duplex-cleanup\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the new server should reuse same channel name successfully"",""Process"":null,""ProcessedText"":""the new server should reuse same channel name successfully"",""Parameters"":{}}]}";

    #endregion

    #region Scenarios Collection
    public static IEnumerable<ScenarioExecution> Scenarios => new[]
    {
        DeserializeScenarioStatic(Test_14_5_Mutable_vs_Immutable_Server_client_python_server_cpp_Json),
        DeserializeScenarioStatic(Test_14_7_Client_Death_During_Response_Wait_client_python_server_cpp_Json),
        DeserializeScenarioStatic(Test_14_10_Channel_Cleanup_on_Dispose_client_python_server_cpp_Json)
    };
    #endregion

    #region Test Methods
    [Fact(DisplayName = "Test 14.5 - Mutable vs Immutable Server [client=python, server=cpp]")]
    [Trait("Scenario", "Test 14.5 - Mutable vs Immutable Server")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "DuplexAdvanced")]    public async Task Test_14_5_Mutable_vs_Immutable_Server_client_python_server_cpp()
    {
        var scenario = DeserializeScenario(Test_14_5_Mutable_vs_Immutable_Server_client_python_server_cpp_Json);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 14.7 - Client Death During Response Wait [client=python, server=cpp]")]
    [Trait("Scenario", "Test 14.7 - Client Death During Response Wait")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "DuplexAdvanced")]    public async Task Test_14_7_Client_Death_During_Response_Wait_client_python_server_cpp()
    {
        var scenario = DeserializeScenario(Test_14_7_Client_Death_During_Response_Wait_client_python_server_cpp_Json);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 14.10 - Channel Cleanup on Dispose [client=python, server=cpp]")]
    [Trait("Scenario", "Test 14.10 - Channel Cleanup on Dispose")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "DuplexAdvanced")]    public async Task Test_14_10_Channel_Cleanup_on_Dispose_client_python_server_cpp()
    {
        var scenario = DeserializeScenario(Test_14_10_Channel_Cleanup_on_Dispose_client_python_server_cpp_Json);
        await ExecuteScenarioAsync(scenario);
    }


    #endregion
}