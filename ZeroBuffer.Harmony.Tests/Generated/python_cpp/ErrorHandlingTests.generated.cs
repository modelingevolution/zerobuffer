// <auto-generated />
using System;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Python_Cpp;

public class ErrorHandlingTests : HarmonyTestBase
{
    public ErrorHandlingTests(ITestOutputHelper output) : base(output) { }

    [Fact(DisplayName = "Test 4.1 - Metadata Write-Once Enforcement [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 4.1 - Metadata Write-Once Enforcement")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "ErrorHandling")]    public async Task Test_4_1_Metadata_Write_Once_Enforcement_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-4-1---metadata-write-once-enforcement"",""ScenarioName"":""Test 4.1 - Metadata Write-Once Enforcement"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-metadata-once\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-metadata-once\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""connect to buffer \u0027test-metadata-once\u0027"",""Process"":""writer"",""ProcessedText"":""connect to buffer \u0027test-metadata-once\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write metadata with size \u0027500\u0027"",""Process"":""writer"",""ProcessedText"":""write metadata with size \u0027500\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write frame with data \u0027test\u0027"",""Process"":""writer"",""ProcessedText"":""write frame with data \u0027test\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to write metadata again with size \u0027200\u0027"",""Process"":""writer"",""ProcessedText"":""attempt to write metadata again with size \u0027200\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""second metadata write should fail"",""Process"":null,""ProcessedText"":""second metadata write should fail"",""Parameters"":{}},{""Type"":""And"",""Text"":""original metadata should remain unchanged"",""Process"":""writer"",""ProcessedText"":""original metadata should remain unchanged"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 4.2 - Metadata Size Overflow [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 4.2 - Metadata Size Overflow")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "ErrorHandling")]    public async Task Test_4_2_Metadata_Size_Overflow_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-4-2---metadata-size-overflow"",""ScenarioName"":""Test 4.2 - Metadata Size Overflow"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-metadata-overflow\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-metadata-overflow\u0027 with metadata size \u00271024\u0027 and payload size \u002710240\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""connect to buffer \u0027test-metadata-overflow\u0027"",""Process"":""writer"",""ProcessedText"":""connect to buffer \u0027test-metadata-overflow\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to write metadata with size \u00272048\u0027"",""Process"":""writer"",""ProcessedText"":""attempt to write metadata with size \u00272048\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""metadata write should fail with size error"",""Process"":null,""ProcessedText"":""metadata write should fail with size error"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 5.1 - Corrupted OIEB Detection [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 5.1 - Corrupted OIEB Detection")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "ErrorHandling")]    public async Task Test_5_1_Corrupted_OIEB_Detection_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-5-1---corrupted-oieb-detection"",""ScenarioName"":""Test 5.1 - Corrupted OIEB Detection"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-corrupt-oieb\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-corrupt-oieb\u0027 with default config"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""connect to buffer \u0027test-corrupt-oieb\u0027"",""Process"":""writer"",""ProcessedText"":""connect to buffer \u0027test-corrupt-oieb\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write frame with data \u0027valid\u0027"",""Process"":""writer"",""ProcessedText"":""write frame with data \u0027valid\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""corrupt OIEB field \u0027operation_size\u0027 to wrong value"",""Process"":null,""ProcessedText"":""corrupt OIEB field \u0027operation_size\u0027 to wrong value"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027cpp\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to connect to buffer \u0027test-corrupt-oieb\u0027"",""Process"":""writer"",""ProcessedText"":""attempt to connect to buffer \u0027test-corrupt-oieb\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""connection should fail with invalid OIEB error"",""Process"":null,""ProcessedText"":""connection should fail with invalid OIEB error"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 5.2 - Invalid Frame Header Detection [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 5.2 - Invalid Frame Header Detection")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "ErrorHandling")]    public async Task Test_5_2_Invalid_Frame_Header_Detection_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-5-2---invalid-frame-header-detection"",""ScenarioName"":""Test 5.2 - Invalid Frame Header Detection"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-invalid-header\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-invalid-header\u0027 with default config"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""connect to buffer \u0027test-invalid-header\u0027"",""Process"":""writer"",""ProcessedText"":""connect to buffer \u0027test-invalid-header\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write frame with data \u0027test\u0027"",""Process"":""writer"",""ProcessedText"":""write frame with data \u0027test\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""corrupt frame header \u0027payload_size\u0027 to \u00270\u0027"",""Process"":null,""ProcessedText"":""corrupt frame header \u0027payload_size\u0027 to \u00270\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to read frame"",""Process"":""reader"",""ProcessedText"":""attempt to read frame"",""Parameters"":{}},{""Type"":""Then"",""Text"":""read should fail with invalid frame size error"",""Process"":null,""ProcessedText"":""read should fail with invalid frame size error"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 5.3 - Reader Death During Write [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 5.3 - Reader Death During Write")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "ErrorHandling")]    public async Task Test_5_3_Reader_Death_During_Write_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-5-3---reader-death-during-write"",""ScenarioName"":""Test 5.3 - Reader Death During Write"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-reader-death\u0027 with metadata size \u00270\u0027 and payload size \u002710240\u0027"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-reader-death\u0027 with metadata size \u00270\u0027 and payload size \u002710240\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""connect to buffer \u0027test-reader-death\u0027"",""Process"":""writer"",""ProcessedText"":""connect to buffer \u0027test-reader-death\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""start writing large frame of \u00278192\u0027 bytes"",""Process"":""writer"",""ProcessedText"":""start writing large frame of \u00278192\u0027 bytes"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""simulate crash while write in progress"",""Process"":""reader"",""ProcessedText"":""simulate crash while write in progress"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""complete write operation"",""Process"":""writer"",""ProcessedText"":""complete write operation"",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt next operation"",""Process"":""writer"",""ProcessedText"":""attempt next operation"",""Parameters"":{}},{""Type"":""Then"",""Text"":""writer should detect reader death"",""Process"":null,""ProcessedText"":""writer should detect reader death"",""Parameters"":{}},{""Type"":""And"",""Text"":""throw reader dead exception"",""Process"":""writer"",""ProcessedText"":""throw reader dead exception"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 6.1 - Sequence Number Gap Detection [reader=python, writer=cpp]")]
    [Trait("Scenario", "Test 6.1 - Sequence Number Gap Detection")]
    [Trait("Platform", "python/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "python")]
    [Trait("Feature", "ErrorHandling")]    public async Task Test_6_1_Sequence_Number_Gap_Detection_reader_python_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""python-cpp-test-6-1---sequence-number-gap-detection"",""ScenarioName"":""Test 6.1 - Sequence Number Gap Detection"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""python"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-sequence-gap\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-sequence-gap\u0027 with default config"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027python\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""connect to buffer \u0027test-sequence-gap\u0027"",""Process"":""writer"",""ProcessedText"":""connect to buffer \u0027test-sequence-gap\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write frame with sequence \u00271\u0027"",""Process"":""writer"",""ProcessedText"":""write frame with sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write frame with sequence \u00272\u0027"",""Process"":""writer"",""ProcessedText"":""write frame with sequence \u00272\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""write frame with sequence \u00273\u0027"",""Process"":""writer"",""ProcessedText"":""write frame with sequence \u00273\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the reader is \u0027csharp\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""read frame with sequence \u00271\u0027"",""Process"":""reader"",""ProcessedText"":""read frame with sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""read frame with sequence \u00272\u0027"",""Process"":""reader"",""ProcessedText"":""read frame with sequence \u00272\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""corrupt next frame sequence to \u00275\u0027"",""Process"":null,""ProcessedText"":""corrupt next frame sequence to \u00275\u0027"",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to read frame"",""Process"":""reader"",""ProcessedText"":""attempt to read frame"",""Parameters"":{}},{""Type"":""Then"",""Text"":""read should fail with sequence error"",""Process"":null,""ProcessedText"":""read should fail with sequence error"",""Parameters"":{}},{""Type"":""And"",""Text"":""error should show expected \u00274\u0027 got \u00275\u0027"",""Process"":""reader"",""ProcessedText"":""error should show expected \u00274\u0027 got \u00275\u0027"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

}