// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Cpp_Csharp;

public class PerformanceMonitoringTests : HarmonyTestBase
{
    public PerformanceMonitoringTests(ITestOutputHelper output) : base(output) { }

    #region Static Test Data
    private static readonly string Test_9_1_CPU_Usage_Monitoring_reader_cpp_writer_csharp_Json = @"{""TestId"":""cpp-csharp-test-9-1---cpu-usage-monitoring"",""FeatureId"":9,""ScenarioName"":""Test 9.1 - CPU Usage Monitoring"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""cpp"",""writer"":""csharp""},""Background"":[{""Type"":""Given"",""Text"":""the test environment is initialized"",""Process"":null,""ProcessedText"":""the test environment is initialized"",""Parameters"":{}},{""Type"":""Given"",""Text"":""all processes are ready"",""Process"":null,""ProcessedText"":""all processes are ready"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-cpu-usage\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-cpu-usage\u0027 with default config"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-cpu-usage\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-cpu-usage\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""monitor CPU usage during idle (blocked on semaphore)"",""Process"":""writer"",""ProcessedText"":""monitor CPU usage during idle (blocked on semaphore)"",""Parameters"":{}},{""Type"":""Then"",""Text"":""verify near-zero CPU when waiting"",""Process"":""writer"",""ProcessedText"":""verify near-zero CPU when waiting"",""Parameters"":{}},{""Type"":""When"",""Text"":""transfer data actively"",""Process"":""writer"",""ProcessedText"":""transfer data actively"",""Parameters"":{}},{""Type"":""Then"",""Text"":""monitor CPU during active transfer"",""Process"":""writer"",""ProcessedText"":""monitor CPU during active transfer"",""Parameters"":{}},{""Type"":""Then"",""Text"":""verify efficient data copying"",""Process"":""writer"",""ProcessedText"":""verify efficient data copying"",""Parameters"":{}}]}";

    #endregion

    #region Scenarios Collection
    public static IEnumerable<ScenarioExecution> Scenarios => new[]
    {
        DeserializeScenarioStatic(Test_9_1_CPU_Usage_Monitoring_reader_cpp_writer_csharp_Json)
    };
    #endregion

    #region Test Methods
    [Fact(DisplayName = "Test 9.1 - CPU Usage Monitoring [reader=cpp, writer=csharp]")]
    [Trait("Scenario", "Test 9.1 - CPU Usage Monitoring")]
    [Trait("Platform", "cpp/csharp")]
    [Trait("Uses", "cpp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "09-PerformanceMonitoring")]    public async Task Test_9_1_CPU_Usage_Monitoring_reader_cpp_writer_csharp()
    {
        var scenario = DeserializeScenario(Test_9_1_CPU_Usage_Monitoring_reader_cpp_writer_csharp_Json);
        await ExecuteScenarioAsync(scenario);
    }


    #endregion
}