// <auto-generated />
using System;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Cpp_Cpp;

public class PlatformSpecificTests : HarmonyTestBase
{
    public PlatformSpecificTests(ITestOutputHelper output) : base(output) { }

    [Fact(DisplayName = "Test 10.7 - Permission Errors [reader=cpp, writer=cpp]")]
    [Trait("Scenario", "Test 10.7 - Permission Errors")]
    [Trait("Platform", "cpp/cpp")]
    [Trait("Uses", "cpp")]
    [Trait("Feature", "PlatformSpecific")]
    [Trait("Tag", "@permission-test")]    public async Task Test_10_7_Permission_Errors_reader_cpp_writer_cpp()
    {
        const string scenarioJson = @"{""TestId"":""cpp-cpp-test-10-7---permission-errors"",""FeatureId"":9,""ScenarioName"":""Test 10.7 - Permission Errors"",""ScenarioDescription"":null,""Tags"":[""@permission-test""],""Platforms"":{""reader"":""cpp"",""writer"":""cpp""},""Background"":[{""Type"":""Given"",""Text"":""the test mode is configured"",""Process"":null,""ProcessedText"":""the test mode is configured"",""Parameters"":{}}],""Steps"":[{""Type"":""Given"",""Text"":""the reader is \u0027user1\u0027"",""Process"":""reader"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""create buffer \u0027test-permissions\u0027 with restrictive permissions"",""Process"":""reader"",""ProcessedText"":""create buffer \u0027test-permissions\u0027 with restrictive permissions"",""Parameters"":{}},{""Type"":""When"",""Text"":""the writer is \u0027user2\u0027"",""Process"":""writer"",""ProcessedText"":"""",""Parameters"":{}},{""Type"":""And"",""Text"":""attempt to connect without permissions"",""Process"":""writer"",""ProcessedText"":""attempt to connect without permissions"",""Parameters"":{}},{""Type"":""Then"",""Text"":""permission denied error should be handled"",""Process"":null,""ProcessedText"":""permission denied error should be handled"",""Parameters"":{}},{""Type"":""And"",""Text"":""no resource corruption should occur"",""Process"":""writer"",""ProcessedText"":""no resource corruption should occur"",""Parameters"":{}}]}";

        var scenario = DeserializeScenario(scenarioJson);
        await ExecuteScenarioAsync(scenario);
    }

}