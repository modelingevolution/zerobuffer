// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;
using ModelingEvolution.Harmony.Core;
using ModelingEvolution.Harmony.Execution;
using ModelingEvolution.Harmony.ProcessManagement;
using Microsoft.Extensions.Logging.Abstractions;
using ZeroBuffer.Harmony.Tests;

namespace ZeroBuffer.Harmony.Tests.Csharp_Csharp;

public class SynchronizationTests : HarmonyTestBase
{
    public SynchronizationTests(ITestOutputHelper output) : base(output) { }

    #region Static Test Data
    private static readonly string Test_6_1_Sequence_Number_Gap_Detection_reader_csharp_writer_csharp_Json = @"{""TestId"":""csharp-csharp-test-6-1---sequence-number-gap-detection"",""FeatureId"":6,""ScenarioName"":""Test 6.1 - Sequence Number Gap Detection"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""csharp"",""writer"":""csharp""},""Background"":[],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-sequence-gap\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-sequence-gap\u0027 with default config"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-sequence-gap\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-sequence-gap\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes frame with sequence \u00271\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes frame with sequence \u00272\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with sequence \u00272\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes frame with sequence \u00273\u0027"",""Process"":""writer"",""ProcessedText"":""writes frame with sequence \u00273\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should read frame with sequence \u00271\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with sequence \u00271\u0027"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should read frame with sequence \u00272\u0027"",""Process"":""reader"",""ProcessedText"":""should read frame with sequence \u00272\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the test corrupts next frame sequence to \u00275\u0027"",""Process"":null,""ProcessedText"":""the test corrupts next frame sequence to \u00275\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027reader\u0027 process attempts to read frame"",""Process"":""reader"",""ProcessedText"":""attempts to read frame"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the read should fail with sequence error"",""Process"":null,""ProcessedText"":""the read should fail with sequence error"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the error should show expected \u00274\u0027 got \u00275\u0027"",""Process"":""reader"",""ProcessedText"":""the error should show expected \u00274\u0027 got \u00275\u0027"",""Parameters"":{}}]}";
    private static readonly string Test_6_2_Burst_Write_Performance_reader_csharp_writer_csharp_Json = @"{""TestId"":""csharp-csharp-test-6-2---burst-write-performance"",""FeatureId"":6,""ScenarioName"":""Test 6.2 - Burst Write Performance"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""csharp"",""writer"":""csharp""},""Background"":[],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-burst\u0027 with metadata size \u00270\u0027 and payload size \u0027102400\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-burst\u0027 with metadata size \u00270\u0027 and payload size \u0027102400\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-burst\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-burst\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes \u002750\u0027 frames of size \u00271024\u0027 as fast as possible"",""Process"":""writer"",""ProcessedText"":""writes \u002750\u0027 frames of size \u00271024\u0027 as fast as possible"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027reader\u0027 process waits \u00271\u0027 second before reading"",""Process"":""reader"",""ProcessedText"":""waits \u00271\u0027 second before reading"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027reader\u0027 process reads all \u002750\u0027 frames"",""Process"":""reader"",""ProcessedText"":""reads all \u002750\u0027 frames"",""Parameters"":{}},{""Type"":""Then"",""Text"":""all frames should be received correctly"",""Process"":null,""ProcessedText"":""all frames should be received correctly"",""Parameters"":{}},{""Type"":""Then"",""Text"":""data integrity should be maintained"",""Process"":""reader"",""ProcessedText"":""data integrity should be maintained"",""Parameters"":{}}]}";
    private static readonly string Test_6_3_Slow_Reader_Flow_Control_reader_csharp_writer_csharp_Json = @"{""TestId"":""csharp-csharp-test-6-3---slow-reader-flow-control"",""FeatureId"":6,""ScenarioName"":""Test 6.3 - Slow Reader Flow Control"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""csharp"",""writer"":""csharp""},""Background"":[],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-slow-reader\u0027 with metadata size \u00270\u0027 and payload size \u002751200\u0027"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-slow-reader\u0027 with metadata size \u00270\u0027 and payload size \u002751200\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-slow-reader\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-slow-reader\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes frames continuously"",""Process"":""writer"",""ProcessedText"":""writes frames continuously"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027reader\u0027 process reads one frame every \u0027100\u0027 ms"",""Process"":""reader"",""ProcessedText"":""reads one frame every \u0027100\u0027 ms"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027writer\u0027 process should block when buffer full"",""Process"":""writer"",""ProcessedText"":""should block when buffer full"",""Parameters"":{}},{""Type"":""Then"",""Text"":""no frames should be lost"",""Process"":""writer"",""ProcessedText"":""no frames should be lost"",""Parameters"":{}},{""Type"":""Then"",""Text"":""flow control should work correctly"",""Process"":""writer"",""ProcessedText"":""flow control should work correctly"",""Parameters"":{}}]}";
    private static readonly string Test_6_4_Semaphore_Signal_Ordering_reader_csharp_writer_csharp_Json = @"{""TestId"":""csharp-csharp-test-6-4---semaphore-signal-ordering"",""FeatureId"":6,""ScenarioName"":""Test 6.4 - Semaphore Signal Ordering"",""ScenarioDescription"":null,""Tags"":[],""Platforms"":{""reader"":""csharp"",""writer"":""csharp""},""Background"":[],""Steps"":[{""Type"":""Given"",""Text"":""the \u0027reader\u0027 process creates buffer \u0027test-semaphore\u0027 with default config"",""Process"":""reader"",""ProcessedText"":""creates buffer \u0027test-semaphore\u0027 with default config"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process connects to buffer \u0027test-semaphore\u0027"",""Process"":""writer"",""ProcessedText"":""connects to buffer \u0027test-semaphore\u0027"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process writes frame and signal"",""Process"":""writer"",""ProcessedText"":""writes frame and signal"",""Parameters"":{}},{""Type"":""When"",""Text"":""the \u0027writer\u0027 process immediately writes another frame before reader wakes"",""Process"":""writer"",""ProcessedText"":""immediately writes another frame before reader wakes"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the \u0027reader\u0027 process should process both frames correctly"",""Process"":""reader"",""ProcessedText"":""should process both frames correctly"",""Parameters"":{}},{""Type"":""Then"",""Text"":""the semaphore count should reflect pending frames"",""Process"":""reader"",""ProcessedText"":""the semaphore count should reflect pending frames"",""Parameters"":{}}]}";

    #endregion

    #region Scenarios Collection
    public static IEnumerable<ScenarioExecution> Scenarios => new[]
    {
        DeserializeScenarioStatic(Test_6_1_Sequence_Number_Gap_Detection_reader_csharp_writer_csharp_Json),
        DeserializeScenarioStatic(Test_6_2_Burst_Write_Performance_reader_csharp_writer_csharp_Json),
        DeserializeScenarioStatic(Test_6_3_Slow_Reader_Flow_Control_reader_csharp_writer_csharp_Json),
        DeserializeScenarioStatic(Test_6_4_Semaphore_Signal_Ordering_reader_csharp_writer_csharp_Json)
    };
    #endregion

    #region Test Methods
    [Fact(DisplayName = "Test 6.1 - Sequence Number Gap Detection [reader=csharp, writer=csharp]")]
    [Trait("Scenario", "Test 6.1 - Sequence Number Gap Detection")]
    [Trait("Platform", "csharp/csharp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "06-Synchronization")]    public async Task Test_6_1_Sequence_Number_Gap_Detection_reader_csharp_writer_csharp()
    {
        var scenario = DeserializeScenario(Test_6_1_Sequence_Number_Gap_Detection_reader_csharp_writer_csharp_Json);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 6.2 - Burst Write Performance [reader=csharp, writer=csharp]")]
    [Trait("Scenario", "Test 6.2 - Burst Write Performance")]
    [Trait("Platform", "csharp/csharp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "06-Synchronization")]    public async Task Test_6_2_Burst_Write_Performance_reader_csharp_writer_csharp()
    {
        var scenario = DeserializeScenario(Test_6_2_Burst_Write_Performance_reader_csharp_writer_csharp_Json);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 6.3 - Slow Reader Flow Control [reader=csharp, writer=csharp]")]
    [Trait("Scenario", "Test 6.3 - Slow Reader Flow Control")]
    [Trait("Platform", "csharp/csharp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "06-Synchronization")]    public async Task Test_6_3_Slow_Reader_Flow_Control_reader_csharp_writer_csharp()
    {
        var scenario = DeserializeScenario(Test_6_3_Slow_Reader_Flow_Control_reader_csharp_writer_csharp_Json);
        await ExecuteScenarioAsync(scenario);
    }

    [Fact(DisplayName = "Test 6.4 - Semaphore Signal Ordering [reader=csharp, writer=csharp]")]
    [Trait("Scenario", "Test 6.4 - Semaphore Signal Ordering")]
    [Trait("Platform", "csharp/csharp")]
    [Trait("Uses", "csharp")]
    [Trait("Feature", "06-Synchronization")]    public async Task Test_6_4_Semaphore_Signal_Ordering_reader_csharp_writer_csharp()
    {
        var scenario = DeserializeScenario(Test_6_4_Semaphore_Signal_Ordering_reader_csharp_writer_csharp_Json);
        await ExecuteScenarioAsync(scenario);
    }


    #endregion
}