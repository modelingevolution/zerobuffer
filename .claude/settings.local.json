{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(make test:*)",
      "Bash(ctest:*)",
      "Bash(./tests/test_resource_cleanup:*)",
      "Bash(make:*)",
      "Bash(./tests/test_zerobuffer:*)",
      "Bash(cmake:*)",
      "Bash(./tests/test_debug_buffer_full:*)",
      "Bash(./tests/test_scenarios:*)",
      "Bash(chmod:*)",
      "Bash(./benchmarks/benchmark_latency:*)",
      "Bash(./clean.sh)",
      "Bash(./build_release.sh:*)",
      "Bash(./benchmarks/benchmark_throughput:*)",
      "Bash(./benchmarks/benchmark_scenarios:*)",
      "Bash(./benchmarks/benchmark_video)",
      "Bash(ls:*)",
      "Bash(./benchmarks/benchmark_video:*)",
      "Bash(../run_video_benchmarks.sh)",
      "Bash(g++:*)",
      "Bash(./simple_bench)",
      "Bash(./benchmarks/simple_bench:*)",
      "Bash(ldd:*)",
      "Bash(./build_debug.sh:*)",
      "Bash(./run_all_tests.sh)",
      "Bash(./run_benchmarks.sh)",
      "Bash(./run_video_benchmarks.sh:*)",
      "Bash(./benchmark_latency:*)",
      "Bash(timeout:*)",
      "Bash(echo:*)",
      "Bash(./test_frame_too_large)",
      "Bash(./reproduce_benchmark_failure)",
      "Bash(ipcs:*)",
      "Bash(./benchmark_throughput:*)",
      "Bash(rm:*)",
      "Bash(./build.sh)",
      "Bash(./test.sh:*)",
      "Bash(dotnet test)",
      "Bash(mkdir:*)",
      "Bash(dotnet build)",
      "Bash(dotnet test:*)",
      "Bash(dotnet build:*)",
      "Bash(cp:*)",
      "Bash(dotnet run:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(python3:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(python run_tests.py:*)",
      "Bash(python -m pytest tests/test_zerobuffer.py::TestTypes -v)",
      "Bash(python -m pytest tests/test_zerobuffer.py::TestReaderWriter::test_create_reader -v -s)",
      "Bash(mv:*)",
      "Bash(./run_unit_tests.sh:*)",
      "Bash(python -m pytest tests/test_zerobuffer.py::TestReaderWriter::test_metadata_write_read -v -s)",
      "Bash(python:*)",
      "Bash(./run_integration_tests.sh:*)",
      "Bash(./ZeroBuffer.Benchmarks)",
      "Bash(# Start relay process\n./ZeroBuffer.TestHelper relay relay-input relay-output &\nRELAY_PID=$!\nsleep 2\n\n# Start a reader on relay-output\n./ZeroBuffer.TestHelper reader relay-output &\nREADER_PID=$!\nsleep 1\n\n# Start a writer to relay-input\n./ZeroBuffer.TestHelper writer relay-input\n\nsleep 1\nkill $READER_PID $RELAY_PID 2>/dev/null)",
      "Bash(./venv/bin/python -m pytest tests/test_zerobuffer.py -v)",
      "Bash(./build.sh:*)",
      "Bash(./tests/test_zerocopy:*)",
      "Bash(./venv/bin/python -m pytest tests/test_zerobuffer.py -v --tb=short)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py -v --tb=short -x)",
      "Bash(./test-lockfree.sh:*)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py::TestScenario1BasicDataTransfer -v)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py::TestScenario2ContinuousStreaming -v)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py::TestScenario4WrapAround -v)",
      "Bash(./venv/bin/python -m pytest tests/test_zerobuffer.py -q)",
      "Bash(dotnet clean:*)",
      "Bash(dotnet nuget locals:*)",
      "Bash(dotnet restore:*)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py::TestScenario3BufferFullCondition -v)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(./venv/bin/python test_debug.py:*)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py -v --tb=short)",
      "Bash(./benchmark_roundtrip)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py::TestScenario3BufferFullCondition::test_buffer_full_blocking -v -s)",
      "Bash(./venv/bin/python -m pytest tests/test_scenarios.py::TestScenario3BufferFullCondition::test_buffer_full_blocking -v)",
      "Bash(./venv/bin/python:*)",
      "Bash(./tests/test_free_space_accounting:*)",
      "Bash(./tests/test_free_space_debug:*)",
      "Bash(./tests/test_debug_wrap:*)",
      "Bash(./tests/test_minimal_debug)",
      "Bash(wait)"
    ],
    "deny": []
  }
}